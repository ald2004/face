#include "DuiFrameWnd.h"
#include "resource.h"
#include <windowsx.h>
#include <algorithm>
#include <time.h>
#include <comutil.h>
#pragma comment(lib, "comsupp.lib")
#pragma comment(lib,"urlmon.lib")
#include "MenuWnd.h"
#include "DefineUnicode.h"
#include <ShellAPI.h>
#include "Base64.h"
#include "CWininetHttp.h"
#include <json/json.h>


extern string carmerID = "";
extern string ip = "172.168.3.98";
//extern string ip = "192.168.100.126";
// 文件筛选
const TCHAR STR_FILE_FILTER[] =
_T("All Files(*.*)\0*.*\0")
_T("Movie Files(*.rmvb,*.mpeg,etc)\0*.rm;*.rmvb;*.flv;*.f4v;*.avi;*.3gp;*.mp4;*.wmv;*.mpeg;*.mpga;*.asf;*.dat;*.mov;*.dv;*.mkv;*.mpg;*.trp;*.ts;*.vob;*.xv;*.m4v;*.dpg;\0")
_T("Music Files(*.mp3,*.wma,etc)\0*.mp3;*.wma;*.wav;*.mid;*.rmi;*.aac;*.ac3;*.aiff;*.amr;*.m4a;*.mka;*.mp2;*.ogg;*.ra;*.au;*.flac;\0");

// 文件查找 
// 由于STR_FILE_FILTER有\0，所以不能用于查找，这里把\0换成|
const TCHAR STR_FILE_MOVIE[] =
_T("Movie Files(*.rmvb,*.mpeg,etc)|*.rm;*.rmvb;*.flv;*.f4v;*.avi;*.3gp;*.mp4;*.wmv;*.mpeg;*.mpga;*.asf;*.dat;*.mov;*.dv;*.mkv;*.mpg;*.trp;*.ts;*.vob;*.xv;*.m4v;*.dpg;|");

const TCHAR STR_FILE_MUSIC[] =
_T("Music Files(*.mp3,*.wma,etc)|*.mp3;*.wma;*.wav;*.mid;*.rmi;*.aac;*.ac3;*.aiff;*.amr;*.m4a;*.mka;*.mp2;*.ogg;*.ra;*.au;*.flac;|");
int m_player_selected = -1;
bool FindFileExt(LPCTSTR pstrPath, LPCTSTR pstrExtFilter)
{
    if (! pstrPath || ! pstrExtFilter)
    {
        return false;
    }

    TCHAR szExt[_MAX_EXT] = _T("");

    _tsplitpath_s(pstrPath, NULL, 0, NULL, 0, NULL, 0, szExt, _MAX_EXT);
    _tcslwr_s(szExt, _MAX_EXT);

    if(_tcslen(szExt))  
    {
        _tcscat_s(szExt, _MAX_EXT, _T(";"));    // .mo不符合条件，由于会匹配到.mov，所以在后面加上【;】来判断是否完全匹配
        return NULL != _tcsstr(pstrExtFilter, szExt);
    }

    return false;
}

bool IsMusicFile(LPCTSTR pstrPath)
{
    return FindFileExt(pstrPath, STR_FILE_MUSIC);
}

bool IsMovieFile(LPCTSTR pstrPath)
{
    return FindFileExt(pstrPath, STR_FILE_MOVIE);
}

bool IsWantedFile(LPCTSTR pstrPath)
{
    return IsMusicFile(pstrPath) || IsMovieFile(pstrPath);
}

void EnumerateFiles(std::vector<duilib::string_t> &vctString)
{
    WIN32_FIND_DATA fd;
    HANDLE hFind = ::FindFirstFile(_T("*.*"), &fd);

    if (hFind != INVALID_HANDLE_VALUE)
    {
        do 
        {
            // 如果为目录
            if (fd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)
            {
                if (_tcscmp(fd.cFileName, _T(".")) && _tcscmp(fd.cFileName, _T("..")))
                {
                    ::SetCurrentDirectory(fd.cFileName);    
                    EnumerateFiles(vctString);              
                    ::SetCurrentDirectory(_T(".."));        
                }
            }
            // 如果为文件
            else
            {
                CDuiString strDir;
                TCHAR      lpDir[MAX_PATH];

                ::GetCurrentDirectory(MAX_PATH, lpDir);
                strDir = lpDir;
                if ( strDir.Right(1) != _T("\\") )
                {
                    strDir += _T("\\");
                }
                strDir += fd.cFileName;

                vctString.push_back(strDir.GetData());
            }
        } while (::FindNextFile(hFind, &fd));

        ::FindClose(hFind);
    }
}

// 产生uRandNum个不相同的随机数，并添加到queRand末尾
void Rand(std::deque<unsigned int> &queRand, unsigned int uRandNum)
{
    if (uRandNum <= 0)
    {
        return;
    }

    unsigned uSizeOld = queRand.size();
    unsigned uSizeNew = uSizeOld + uRandNum;
    queRand.resize(uSizeNew);
    srand(unsigned(time(NULL)));

    for(unsigned i = uSizeOld; i < uSizeNew; i++)
    {
        queRand[i] = i;
    }

    for(unsigned i = uSizeOld; i < uSizeNew; i++)
    {
        std::swap(queRand[i], queRand[rand() % uSizeNew]);
    }
}

std::string UnicodeConvert(const std::wstring& strWide, UINT uCodePage)
{
    std::string strANSI;
    int iLen = ::WideCharToMultiByte(uCodePage, 0, strWide.c_str(), -1, NULL, 0, NULL, NULL);

    if (iLen > 1)
    { 
        strANSI.resize(iLen-1);
        ::WideCharToMultiByte(uCodePage, 0, strWide.c_str(), -1, &strANSI[0], iLen, NULL, NULL);
    }

    return strANSI;
}

std::string UnicodeToUTF8(const std::wstring& strWide)
{
    return UnicodeConvert(strWide, CP_UTF8);
}

std::string UnicodeToANSI(const std::wstring& strWide)
{
    return UnicodeConvert(strWide, CP_ACP);
}


CDuiFrameWnd::CDuiFrameWnd( LPCTSTR pszXMLName )
: CXMLWnd(pszXMLName),
m_pSliderPlay(NULL),
m_bFullScreenMode(FALSE)
{
}

CDuiFrameWnd::~CDuiFrameWnd()
{
}

DUI_BEGIN_MESSAGE_MAP(CDuiFrameWnd, CNotifyPump)
DUI_ON_MSGTYPE(DUI_MSGTYPE_CLICK,OnClick)
DUI_ON_MSGTYPE(DUI_MSGTYPE_ITEMCLICK, OnClick)
//DUI_ON_MSGTYPE(DUI_MSGTYPE_DBCLICK, OnClick)

DUI_END_MESSAGE_MAP()


//定义拼接函数  c++中没有split函数
vector<string> split(const string &s, const string &seperator) {
	vector<string> result;
	typedef string::size_type string_size;
	string_size i = 0;

	while (i != s.size()) {
		//找到字符串中首个不等于分隔符的字母；
		int flag = 0;
		while (i != s.size() && flag == 0) {
			flag = 1;
			for (string_size x = 0; x < seperator.size(); ++x)
				if (s[i] == seperator[x]) {
					++i;
					flag = 0;
					break;
				}
		}

		//找到又一个分隔符，将两个分隔符之间的字符串取出；
		flag = 0;
		string_size j = i;
		while (j != s.size() && flag == 0) {
			for (string_size x = 0; x < seperator.size(); ++x)
				if (s[j] == seperator[x]) {
					flag = 1;
					break;
				}
			if (flag == 0)
				++j;
		}
		if (i != j) {
			result.push_back(s.substr(i, j - i));
			i = j;
		}
	}
	return result;
}

LRESULT CDuiFrameWnd::OnTimer(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	////发送http请求--get方式  
	CWininetHttp*http = new CWininetHttp();
	//===========================查看白名单===============================================================
	string url = "http://"+ip+"/api/no-user/faceLog/logs?page=0&size=6&sort=id,desc&cameraId=" + carmerID + "&status=2";
	string data = http->RequestJsonInfo(url, Hr_Get,"","");
	//string data = "[{\"id\":2,\"photo\":\"api/images/461a56a4601c473e8741e7e6b73d03b6.jpg\",\"facePhoto\":\"api/images/cd2f8d54d8e243dfa35a1f870259722a.jpg\",\"createTime\":1556273068000,\"idCard\":\"111111111111111111\",\"status\":2,\"name\":\"陈宪健\",\"phone\":\"1111111111111\",\"des\":\"111111111111111\",\"embedding\":\"[-1.4400152, 0.6451032, 0.26462752, 0.8746899, 0.7616573, 0.12596099, 0.41581962, 1.5276725, -0.09500391, 1.3876362, 0.5582243, 1.3334633, -0.053422146, 0.049011394, -0.08084988, -0.24895221, -1.5307465, -0.2116798, -0.7897842, -1.1556343, 0.14056468, -0.383689, -0.77851844, 0.34798175, 0.12052418, 1.0533867, -1.6406689, 0.08399878, -0.12226754, -1.0787009, -0.6320575, 0.80640334, -0.27722308, -1.0813888, 0.3196923, 1.090025, -0.119522445, 0.55493057, -1.0699246, 0.896727, -0.016724147, -1.8084097, -1.0954968, -0.85218924, 0.63309526, -1.2197611, -0.3253882, 0.095537, -0.2037911, 0.8378224, 0.20551485, 0.8411193, -0.8993344, 0.36239782, -0.11238221, -0.21173662, -0.8618795, 0.39230257, -0.34557402, 0.5781261, 0.23223306, -0.70313853, -0.44424152, -1.0264549, 1.2122614, -1.6785709, 0.14160953, -0.25385574, -0.08871183, 5.926024E-4, 1.0549128, -0.6085348, -0.7925954, 0.4296747, 1.785264, -1.5820162, -0.56400555, -0.74581194, -0.59807765, -0.9151723, -0.30307198, -0.25082204, 0.54143715, 0.9068881, 0.9321424, 1.436748, 0.9328728, -0.10053575, 0.63272995, -0.6901415, -0.48524547, -1.5114982, 0.4306901, -0.47728392, -1.3296751, 0.003629094, -0.4755606, 0.5449407, -0.10437643, -0.7138629, -0.49084467, -0.47800732, -1.1068153, 1.5120535, 1.2027247, -0.17286132, 0.7173601, -0.21513946, -0.53769904, 0.07073937, 1.2764431, 1.4738712, 1.0616833, -0.9517845, -0.1828427, 0.55302936, -0.64688075, -2.5741053, -0.025717663, -0.47037178, 0.50731015, -0.25604346, -0.2484658, -0.60240716, -0.6187598, -0.3259704, 0.3059408, 0.068544224]\"},{\"id\":3,\"photo\":\"api/images/e04cd5981d864878b6466b10deb7b8d2.jpg\",\"facePhoto\":\"api/images/cc5a6444789d47ebb0d003bad8eee2b4.jpg\",\"createTime\":1556273106000,\"idCard\":\"111111111111111\",\"status\":2,\"name\":\"程强\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6404802, -0.22093289, 1.0782979, -0.85478085, 0.28959885, -0.42865416, 2.4096522, 1.087716, 1.3003848, -0.23982033, -0.68830997, -0.30421343, 0.2414809, 0.05102005, -1.0380512, -0.20419215, -0.378532, -0.4396497, -0.6643774, 1.2826979, 0.6125868, -1.0104938, -1.4237329, -0.2895159, -0.6213681, 0.90110457, -0.42795017, 2.9401104, 0.651558, 0.18393782, 0.9279308, 0.21969698, 0.36470965, -0.6922186, -0.012073857, 0.25392514, -1.0471017, -0.5521572, 0.18683052, -0.5803059, 0.6506972, -0.47329295, -1.3124616, -0.57661223, 1.6730458, -2.1885037, 0.3705211, 0.5600341, -1.1034927, 0.13028641, -1.1432753, -0.49627912, 0.734453, -0.52567196, 0.90518296, 1.3738246, -0.814132, -0.4398109, -0.012062972, -0.44503748, 0.32478613, 1.1393331, -1.3671409, -2.322604, -0.39067906, 0.6001213, 1.3304546, -0.7827779, -1.4596335, 0.6335447, 1.4796455, 1.4081497, -0.02153065, -0.5216898, 1.4645987, -1.0328634, -1.1962007, -0.8118608, -0.6475339, 1.9458501, 1.5541033, 0.7299879, 1.012298, -0.38899115, -0.09152084, -1.133778, -0.3999983, -0.30581298, -0.032933496, -0.7386391, -0.75189936, -0.04290776, 0.8782241, 0.3476032, -0.40590066, -0.18832871, 0.5013023, -1.1542698, 2.733139, -0.5518569, -0.989852, -1.4732974, -0.16870911, -0.26579535, -1.3444738, 0.010232242, -0.05290367, 0.4013139, -0.72583735, -0.9488756, -0.4201457, -1.0726483, -0.36929756, 0.028476134, -0.11291282, 0.30210528, 1.3160098, -1.6151779, -1.5262147, 1.7515954, 0.27571, 0.028027575, 0.60790306, -0.6632895, -0.93875384, 0.017065791, -1.6518697, 0.3973762]\"},{\"id\":4,\"photo\":\"api/images/056252fa11214b68a51d89a42a28d724.jpg\",\"facePhoto\":\"api/images/3a9ee070937b4e46aeaf4e32bc844567.jpg\",\"createTime\":1556273155000,\"idCard\":\"123123123123123\",\"status\":2,\"name\":\"杲晓明\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6890682, 0.83005565, 0.7006356, 0.3311335, -0.12386112, 0.9869977, -0.06567064, 0.60920954, 0.6317558, 1.893698, 0.21982354, 0.9589652, -1.4285797, 0.016681777, -0.69641584, -0.99923694, -0.3953585, -0.57902104, -0.15947005, 0.27743968, 0.48125544, -0.45871466, -0.50133455, -1.097203, 0.17049785, 0.51938206, -0.3458928, 0.21425974, -0.55479985, -0.08390793, 0.70241725, 0.9639671, -0.61285084, 0.3430673, 0.057332106, 0.4377386, -0.14971587, 1.1943835, 0.30472887, -0.24789484, 0.079794735, 1.796334, -0.040973317, -0.16625158, 0.785094, -2.2889516, 0.041496616, -0.71363354, 0.25319573, 0.22366717, 1.4287205, 0.71428764, -0.569214, 0.45967925, -0.737188, -0.33287716, -0.51986027, 0.74351734, 0.4765597, 0.17935231, -0.4052171, -0.36782515, 1.3702238, 1.180208, 0.21746162, 0.42260012, 0.37098595, 0.8658466, -0.049795475, 0.525717, 1.2834991, 0.5977808, -0.3160711, -0.23754853, 0.67487776, -0.0518094, -0.27718145, -0.6687922, 0.35178167, 0.53039175, 0.46359745, -0.5255458, 0.22821343, 0.3972479, -0.10988712, -0.5918918, 0.93664443, -0.4474239, 0.0032964705, -0.16739267, 0.32779092, -0.74358565, 1.518196, -0.27301902, 0.247744, 0.6153093, 0.48755342, 0.5647949, -1.2802047, -0.056567706, -0.5591072, 0.48177135, -0.796297, 0.04460408, 0.6490855, -0.062658, 0.76664984, -0.1611926, -0.33028632, 2.1852252, 0.5602745, -0.40043783, -0.40872905, 0.611992, -0.3847778, -1.4501771, -0.7642981, -0.8892275, -0.3013271, 0.5603079, 0.23014343, 0.31345668, 0.45210618, 1.1263101, 0.25600913, -0.5291169, 0.9897624, 0.39862493]\"},{\"id\":5,\"photo\":\"api/images/574012838a704472afca7488bb81c957.jpg\",\"facePhoto\":\"api/images/2f0d7ca7d949427f8c1585ced2c4e18c.jpg\",\"createTime\":1556273173000,\"idCard\":\"11131231231231231\",\"status\":2,\"name\":\"何玲\",\"phone\":\"123123123123123\",\"des\":\"\",\"embedding\":\"[1.0548526, -0.8521152, 0.79311955, 0.08578889, -0.33439085, -0.61195964, 0.18195026, 0.32265082, 0.07678358, -0.15060125, 0.7908881, 0.08451626, 0.03540916, -1.3073689, 0.8191194, -1.1959053, 0.23474371, 0.9908264, -0.18675777, -0.034923397, 1.3173224, -0.3254641, -2.4103897, -0.33821493, 0.84148383, -0.16962627, 0.19722573, 1.1229166, 0.46900302, 1.2516091, 1.1574138, -0.9351172, -0.5345119, -1.2762827, 1.0037024, 0.28555828, 0.65660095, -1.0713087, -1.6549762, -0.33600378, -0.6288224, -0.23781762, 0.62254834, -0.46636727, 0.8864793, -0.586428, 0.060618944, -1.4217057, 0.42536885, 0.96735, -0.0042176275, 0.38339567, 0.53973186, -0.06996329, 0.72109914, 1.7772502, -0.1590842, 0.537106, 1.0138521, -0.49714914, -1.688095, 1.2490373, -1.2618052, -0.5741497, 1.9095057, -0.9726699, 0.1982694, 0.036978435, 0.058657236, 0.2678928, -0.2387076, 0.17464152, 0.020080078, -0.49112776, -0.12188471, 0.1617636, 0.52396, -1.1321415, 1.0599047, 0.2822863, 2.1467776, 0.33926642, -0.7079503, 0.41453856, -0.65476614, -0.5910174, 0.93260765, -0.57118064, -0.5969466, 0.37894976, -0.13312545, -0.19008474, -0.8046749, 0.17795718, -1.2620711, 0.43180022, -0.020769747, -0.012535021, -0.106823295, -0.44050154, 0.3125924, -0.38561806, -1.5926973, 1.2190038, 0.38109505, 0.99247617, -0.942555, -0.54687774, 0.701352, -0.63406396, 0.82443595, -0.4982668, 0.13860318, 1.2869362, -1.4121718, 0.15624675, -1.3383298, -0.10845718, 0.17899749, -0.083091825, 0.20818913, 1.1549644, 1.4994057, 0.55030197, -1.0775876, -0.07484485, 0.2616936, 0.35043558]\"},{\"id\":6,\"photo\":\"api/images/b82890dd0fc3473fa1d780d980050a46.jpg\",\"facePhoto\":\"api/images/2c1ce23ecd264ec887c4eaec1d641559.jpg\",\"createTime\":1556273204000,\"idCard\":\"45135131234234123\",\"status\":2,\"name\":\"吴明宇\",\"phone\":\"3412341234\",\"des\":\"\",\"embedding\":\"[0.17067625, -0.6806514, -0.30767024, -0.2908418, -0.025509853, 1.420601, 0.5589702, 1.6246772, -1.3903996, 2.3691618, -0.30465293, 1.1151859, -0.7585342, -0.029459426, -0.5785202, -0.7252822, 0.27760524, 0.19998313, -3.586959, -0.6152935, -0.30069473, -0.89084804, 0.7328589, -0.017592505, -0.93534917, -0.8003881, -1.1031781, -0.58422816, -0.32800874, -1.425464, -0.14709054, 0.45678285, 1.0234568, -0.2896148, -0.042398337, -0.13264859, 0.81188786, -1.3668506, 0.7218537, 0.26653147, -0.09585937, 0.6988528, 0.2547587, -0.6691112, -0.8995134, -0.040217552, -1.1990551, 0.82440466, -0.39001322, 0.0014692359, 0.5035889, -1.4786457, -0.8907829, -1.3626045, -1.1225765, -0.83116955, 1.2374909, 0.5922378, -0.38960704, 0.7629879, -0.8746563, 0.01995349, 2.0040848, 0.45866835, -0.8963298, -0.76949835, 0.29105544, -0.80355066, 0.5213779, -0.9110299, 0.20435306, 0.89038545, -0.05313462, -1.1716405, 0.83845866, 0.2763683, -0.7777581, 0.7652084, 0.31850424, -1.4322191, 0.30776504, -0.9912002, -1.4179422, 1.3251332, 0.43514115, -0.9031695, -0.18410921, -1.316576, 0.32878152, -0.7540181, 1.1635334, -0.27642432, -1.4115477, 0.84543365, -1.1221458, -0.07010846, 0.52703536, -0.96692675, -0.58969396, 0.48734817, 1.4067193, -0.20626314, -0.31059396, 0.65692276, -0.7042123, -0.39387375, 1.9924076, 0.40968803, 0.2808323, 1.1361241, -0.14237618, -6.789584E-4, -0.41412714, 0.40198222, -0.08718496, 0.7950047, 1.4512724, 0.24288818, -0.2133232, -0.73981154, 0.7286097, 0.6204948, 0.6139743, -0.75372475, 0.40053138, -0.7972326, 1.104166, -0.11261107]\"},{\"id\":7,\"photo\":\"api/images/2de35ece38e94d76973d954d1ab90c7a.jpg\",\"facePhoto\":\"api/images/c3e88fdfe3a54ad5bdc5bf39d2a13151.jpg\",\"createTime\":1556273240000,\"idCard\":\"124125111511111\",\"status\":2,\"name\":\"袁璞\",\"phone\":\"13412341234\",\"des\":\"\",\"embedding\":\"[-2.025114, -0.25040734, -0.38396645, -0.05438198, 0.33327532, 0.4146087, 0.45094618, 1.1797194, 0.25294724, 0.99515617, 0.035760503, 0.88879216, 0.7482136, -0.9112992, 0.3612447, -0.10855479, -0.5739275, 0.075411975, -0.054131247, -0.21775049, 0.2851437, 0.1790575, -0.20084533, 0.9849472, 0.13843952, 0.06407902, 0.21239863, -0.24900094, 0.7528574, 0.83450705, -0.015042185, 0.061399247, -0.35061172, -0.1015756, -0.41192737, -0.9774467, -0.876451, 0.14792235, -0.4748804, 0.57042795, -0.86024034, 0.013399087, -1.3434957, -0.5809079, 1.2291933, 0.21384756, -0.60295326, -0.013907477, 0.035018258, 0.35013807, -1.0260556, 0.34296277, 0.2657627, 0.059378423, -0.1508429, 0.061466884, 0.08379524, -0.101631455, 0.21302709, -1.7497431, -0.30119517, 0.47428474, -0.8101081, 0.112537004, 0.12397413, -0.5527673, 0.39104852, -0.15613303, -0.26409993, -1.8372606, 1.3945122, -0.3200767, 0.31668946, 0.85930693, -0.011161889, -0.6898816, 0.49779847, -0.58778954, -0.92690444, 0.4110511, 0.509629, -0.34848163, -0.34927768, 0.5312836, 0.7344007, -0.085669115, 0.5556444, -0.30770284, -0.38169804, -0.39078367, 0.11851902, -1.293987, -0.6412762, 0.8475267, -0.6732441, -0.34533936, 0.5284727, 0.8669088, 0.5952963, -0.81767166, 0.13832496, 0.5507618, -1.1169083, -0.077078335, 1.1135011, -1.020442, -0.4459424, 0.18501139, 0.24825728, 0.51873225, 0.53400755, -0.15154883, 0.43417296, -0.92195606, -0.4612352, -0.5936926, -0.22849952, -0.46618667, -0.91859525, 0.3964869, 0.3569416, 0.72241116, 0.52069026, 0.32918438, -0.58234847, -0.3143721, 0.093173645, -0.07923526]\"},{\"id\":8,\"photo\":\"api/images/cd970b28e2fc44568cb376b64ee80b17.jpg\",\"facePhoto\":\"api/images/1687d31b195749debaca4cfdc0518584.jpg\",\"createTime\":1556273264000,\"idCard\":\"512412341234123\",\"status\":2,\"name\":\"于博成\",\"phone\":\"1111111111111\",\"des\":\"\",\"embedding\":\"[-1.8957708, 1.2380171, -0.7075868, 0.13583075, -0.5764373, -0.6842059, 0.5560215, 0.7682434, 0.42950463, 0.78963614, -0.19079353, 0.3845071, 0.56551284, 0.54654855, 0.3289345, -0.36228114, -1.7874331, 0.8266117, -0.80209225, -0.7515898, 0.05194748, 1.6076427, 0.6674606, -0.5753246, 0.016393762, 1.5582179, 0.61432546, 0.8414924, -0.6054566, -0.23399325, -0.6752211, 1.261782, -1.1481024, -0.9664495, 0.61196464, 1.8745209, -0.52137995, -0.46800217, -1.7355286, 0.021180332, 0.6644944, -1.1193838, -2.3943553, 1.8209995, 0.40427303, -1.281945, -0.74529225, -0.6157363, -0.34174526, -0.9464881, 1.1505897, 0.52277094, -0.16448747, 0.7916364, -1.1729934, -0.07051295, -0.12855428, 0.49475184, 0.7742363, 0.033971347, 2.1757145, 0.02265473, 0.5746165, -1.086684, -0.20821461, 0.04113031, 0.15668818, 0.8506179, -0.719747, 0.83429116, 2.0890498, -0.62778556, -0.38589823, -0.2694681, 1.2149738, -0.7793955, -0.5157203, -0.5397245, 0.58981955, 0.058594488, 0.17601797, -0.6691642, 0.16288026, 0.5480775, -0.17568171, 0.69702655, 0.2936083, 0.3640346, 1.0852022, -1.5229648, 0.52993274, -0.9364619, 0.07792295, -0.31929722, -0.99926156, 0.6445487, 0.1756084, 1.4737172, -0.29330215, -0.55977696, -0.99079204, -0.20782827, -0.43706945, 0.88271594, 0.17318526, 0.36490393, 0.87373894, -0.59372354, -0.40144062, 2.168316, -0.5776743, 0.19815661, 1.0640091, 0.3104119, -1.633867, -0.28243157, -0.8745168, -0.98116785, -0.6210294, 0.34983432, 0.125388, -0.2632946, 0.05174572, 0.42122707, -0.27471107, -1.0916156, -1.0080075, 0.578455]\"},{\"id\":9,\"photo\":\"api/images/f2417eba4c17478b90c33b4f864aff95.jpg\",\"facePhoto\":\"api/images/8cadb11e27ff4897908b212d1103a16e.jpg\",\"createTime\":1556273288000,\"idCard\":\"12512512341234123\",\"status\":2,\"name\":\"龙明明\",\"phone\":\"123412341234\",\"des\":\"\",\"embedding\":\"[0.44670027, 0.47711518, 0.30061167, 0.65321344, 0.21203442, 1.4708812, -0.8549201, 1.4066112, -0.806957, 1.8819294, -0.44502196, 0.8487141, 1.0832174, -0.15317093, -0.24792106, -0.6357421, 0.18963176, -0.64953005, -1.1274177, -0.51533127, -0.0070767, 1.5493466, -0.95284903, -0.19356498, 0.88978803, 0.031156888, -1.0599252, 0.98180366, -0.6911489, 0.8396231, 0.57903576, 0.52218026, 0.11909889, -0.06431806, -0.4805849, -1.0138917, 0.66892654, 0.20090544, -0.7869635, 0.90649205, -0.6104538, -0.8030855, 0.2850986, -0.25693756, 0.032041434, -0.7846277, 1.1472446, -0.5030891, -0.8058, -0.16635521, -0.5401272, -0.4173988, -0.8184032, 0.061768696, -0.6400277, 0.15751314, -0.4962245, -0.12598921, 0.63462967, -0.02846437, 1.0028538, 0.53461283, 0.715558, -0.81926733, 0.46757832, -0.41998982, 0.49496967, 0.7967518, -0.81809783, -0.8277628, -0.7801564, -1.4615133, -1.641854, 1.5509491, 0.5107204, -0.0089637935, 1.1269283, -0.3729752, -0.60213083, -1.5646158, 0.8658311, -0.2880615, -0.83669555, 0.2506542, 0.7304282, 0.9616922, 0.27992362, 0.6653295, -0.2677699, -0.09706547, -1.0644097, -0.2266024, -0.119866475, 1.3931605, -0.46385476, -0.76801646, -0.8984536, -0.29962063, 0.23906702, -0.4567237, 0.29815853, -0.2542603, -0.3033785, 0.78531057, -0.28254575, 0.047785338, 1.2024982, 0.009695956, 1.1607183, 0.7044649, -1.0247152, -1.1246669, 2.061482, 0.8489972, 0.10765874, -0.47634673, 0.32217824, -0.5904369, -0.4126597, -1.5521736, -1.396946, 0.6108344, -0.28859258, 0.03170532, -0.65636885, -0.0023252019, -0.7470265, 0.18863833]\"},{\"id\":10,\"photo\":\"api/images/558e5f41512942aaa486c4bbdead4524.jpg\",\"facePhoto\":\"api/images/d144409682f146a3a50c9c9a42090c9d.jpg\",\"createTime\":1556273356000,\"idCard\":\"22222222223422222\",\"status\":2,\"name\":\"郑敏\",\"phone\":\"512112123412432\",\"des\":\"描述\",\"embedding\":\"[-1.2705379, 0.97272605, -0.26115018, -0.16281968, -1.3175406, 0.6918671, 0.10548785, 1.919105, 0.39216432, 1.8216234, 0.6886387, 0.12781304, 0.986165, 0.7486268, -0.40188447, -0.8616181, -0.6239805, 1.390204, -2.2447224, -0.7008109, 0.73550767, -0.1934011, -0.5215538, 0.23679818, 0.8834749, 1.821925, -1.036854, 0.2600256, -0.3664054, 0.87640077, 0.94565666, 0.106354, -0.36235335, -1.1005473, -1.1642582, 0.6205245, -0.37500128, 0.7654341, -1.3284116, 0.7271324, 0.041580714, -1.2850214, -0.7638897, -1.5782278, 0.2757073, -0.92630655, 0.88229, -0.48459494, -0.7198224, -0.86031383, 0.40005618, -0.9656633, -1.0715669, -0.14626183, -0.591917, -0.05051488, 0.14381668, 1.270731, 0.6096086, -1.0427833, 0.31992078, -0.16281052, -0.5520229, -0.18957126, 0.36711594, -0.46182317, -0.96185136, 1.3869293, -0.03258694, 0.738966, 2.1684983, -0.5385125, -0.837034, 0.013444913, 0.8092245, -0.34689274, 0.7217132, -0.060054064, -1.2614756, 0.59211975, 0.86528474, -1.4768215, -1.8513198, 0.5997342, -0.057285987, 1.6120651, 0.8018805, 1.422267, 2.6134458, -0.450779, -0.5298835, -2.0381556, -0.19731069, 1.5281116, -0.9798354, 0.92440516, -0.32210994, -0.5812523, 0.35116738, -0.87823546, -0.020298578, -0.26055726, -0.6473049, 0.8830585, 0.30997476, -1.6280615, 1.2031631, 0.051980987, -0.94828594, 0.2657793, -0.059501074, 0.48666567, 1.5730749, 1.2528563, -0.2808668, -0.7975759, 0.041079015, -0.60298073, -0.87126446, 0.5814031, 0.335678, 0.10227262, 0.86661595, 0.10926009, -0.8744264, -0.48095134, 0.65987295, -0.10931062]\"},{\"id\":11,\"photo\":\"api/images/22994cebef474536ac5bcaaed63574cd.jpg\",\"facePhoto\":\"api/images/9ebdd9747e4a498a995b584cb12e6aa2.jpg\",\"createTime\":1556423653000,\"idCard\":\"1111111111123123\",\"status\":2,\"name\":\"柯兆胜\",\"phone\":\"123123123\",\"des\":\"123123123\",\"embedding\":\"[-0.88478136, -0.9364144, 0.020074613, 0.46507397, 0.48283428, -0.08312523, -7.0207566E-4, 1.0774661, 0.3752172, 0.9828768, 0.9886745, -1.3429844, 0.102270156, 1.2597201, -0.6699962, -0.12045772, -0.49792784, -0.4067703, -0.7396564, 0.029053923, -0.37315887, 0.30700308, -0.26722515, 0.72933763, 0.9816463, -0.0127441045, -0.16315526, 0.9930612, 0.9405875, -0.30844277, 0.96967345, 1.054161, -0.5111444, -0.10090917, -0.8100174, 0.63141525, 1.1573294, -0.005752718, 0.12837794, -0.27695283, -0.24878253, -0.65949565, -0.6844268, -0.4396083, 1.6813154, -2.1243114, -0.18033198, -0.14027339, 0.36861464, -0.06770572, -1.0820371, 0.66258454, -1.1357725, 0.19694164, 1.0660864, -0.53525317, 0.5077574, -0.77945477, -0.5005513, 0.11733626, 0.80401725, -0.044621658, 1.2237746, -0.6720435, 0.7447997, 1.2965884, -1.10189, 0.25641418, -0.5004631, -0.47750965, 0.8506222, 0.5212792, -0.112385735, -0.9343806, 0.00926275, -0.0606956, 1.8311495, 0.1302433, -0.6987415, 0.91116923, -0.25119546, -0.6357224, 0.41400266, 0.882223, 0.050165564, 1.233042, 0.9884193, 0.18127128, 2.0411901, -1.5662789, 0.53425914, 0.29918, 1.1918974, 0.17087041, -0.28145126, 0.71836364, 1.3745381, -1.2150807, 0.5403514, -0.4172787, 0.1966333, 0.030770535, 1.0411296, -0.055893313, 0.3879124, 0.40983284, 0.75672174, 0.86866593, -0.35493457, -0.86776793, -0.8789889, -0.6188493, 1.1490949, 0.3438213, 0.37258753, 0.45162392, 0.9765615, -0.28553903, -0.36776483, -0.13909236, 0.8712856, -0.6621576, -0.12875515, -0.77087504, 0.1727076, -0.3746315, -0.8526034, -0.03900963]\"},{\"id\":12,\"photo\":\"api/images/3e88ecde4bf84bdfa22ebe13912f6857.jpg\",\"facePhoto\":\"api/images/1fa210763eec47bea5c126f7fef69f6c.jpg\",\"createTime\":1556423750000,\"idCard\":\"1111111111112455\",\"status\":0,\"name\":\"王晓明\",\"phone\":\"1222211222\",\"des\":\"2141234\",\"embedding\":\"[0.5904552, 0.392133, 0.6273588, -0.035062104, -0.58359337, -0.38603202, -0.16038927, 0.94903797, 0.85901475, 1.6477327, -0.25026438, 0.056801993, -0.5225454, 0.6869571, 0.36447877, -0.005410239, -1.1331189, -0.4085702, -1.0018805, -1.3500493, 0.44969025, 0.95017534, -0.76471007, 0.2398697, 0.06832751, 1.0894092, -1.0277284, 0.85925686, -0.68652356, -0.40186772, -0.16741236, 1.1333385, -0.410408, -0.8103515, 0.11414875, 1.3506052, 0.021311367, -0.5477903, -0.13682295, 0.15373914, -0.17419456, -0.7511337, -1.2838491, -0.3070808, -0.12520686, -1.8612369, -1.9584142, 0.010401951, -0.30004662, 0.47600836, -0.81903183, -0.11837021, -1.5935028, 0.66080236, 0.19542083, 1.3681872, 0.73582196, 0.7876307, 0.05564177, 0.5833237, -0.49768937, -0.19057551, 0.09440142, -0.7500294, 0.3759269, -1.1743342, -0.41677183, -0.29294163, 0.48637903, 1.0635406, 0.36985362, 0.10001303, 0.23846565, -0.22420995, 0.65601856, -2.0607715, 0.12485287, -0.15033881, 0.47381112, -0.9028754, 0.73505104, -0.4562845, -0.50631344, 1.1531782, 0.998448, 0.12003586, 0.93582517, -0.36567542, -0.16871153, -1.8613737, -0.6502634, -0.88411623, 1.9187392, -1.4994079, -1.906835, 0.33176753, 0.9923862, 0.9304077, -0.25830713, -0.6554393, 0.6057219, 0.51754755, 0.13026156, -0.64946795, 0.38328907, -0.19922571, 0.3179771, 0.05059095, -0.545264, 0.3878855, -0.28456366, 0.6687446, 0.28326344, 0.67916125, -0.22990547, 0.58050853, -0.08575891, -1.3997644, -0.24152803, -0.32741886, 0.13257872, -0.11886391, 1.2270269, -0.37283388, -0.580727, -0.7226151, 0.9678455, 0.13636494]\"}]";
	//解析json
	Json::Reader reader;
	Json::Value DevJson_;
	reader.parse(data, DevJson_);

	Json::Value DevJson =DevJson_["content"];
	int siNum = DevJson.size(); 
	for (int i = 0; i < siNum; i++)
	{
		//MessageBox(NULL, xx->GetName(), _T("随便啥x"), NULL);
		//string  bdurl = "https://img5.duitang.com/uploads/item/201411/25/20141125205123_UUmSd.jpeg";
		//获取照片
		string username = DevJson[i]["facePhoto"].asString();
		string bdurl = "http://"+ip+"/";
		bdurl += username;
		size_t len = bdurl.length();
		int nmlen = MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, NULL, 0);
		wchar_t* buffer = new wchar_t[nmlen];
		MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, buffer, nmlen);
		//获取识别人姓名
		string name = DevJson[i]["name"].asString();
		size_t namelen = name.length();
		int nameLenth = MultiByteToWideChar(CP_ACP, 0, name.c_str(), namelen + 1, NULL, 0);
		wchar_t* nameStr = new wchar_t[nameLenth];
		MultiByteToWideChar(CP_UTF8, 0, name.c_str(), len + 1, nameStr, nameLenth);
		LPCTSTR LnameStr = (LPCTSTR)nameStr;

		vector<string> v = split(username, "/"); //可按多个字符来分隔;
		string jpg = v[2];
		string count = ("D:\\tmp\\skyw" + jpg );
		const char* count1 = count.c_str();
		int dataLen1 = MultiByteToWideChar(0, 0, count1, -1, NULL, 0);
		wchar_t *dataStr1 = new wchar_t[dataLen1];
		MultiByteToWideChar(0, 0, count1, -1, dataStr1, dataLen1);
		LPCTSTR Ls = (LPCTSTR)dataStr1;

		HRESULT hr = URLDownloadToFile(NULL, buffer, _T(s), 0, NULL);
		if (SUCCEEDED(hr))
		{
			string num = to_string(i);
			string count = "w";
			count += num;
			const char* data1 = count.c_str();
			int dataLen = MultiByteToWideChar(0, 0, data1, -1, NULL, 0);
			wchar_t *dataStr = new wchar_t[dataLen];
			MultiByteToWideChar(0, 0, data1, -1, dataStr, dataLen);
			LPCTSTR LnodesStr = (LPCTSTR)dataStr; 
			CLabelUI* xx = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T(nodesStr)));
			xx->SetBkImage(_T(s));
			xx->SetText(_T(nameStr));
			//xx->DrawHtmlText(_T(nameStr));
		}
		bHandled = TRUE;
		//MessageBox(NULL, _T(s), _T(s), 0);
	}

	//===========================黑名单===============================================================
	////发送http请求--get方式
	CWininetHttp*http1 = new CWininetHttp();
	string url1 = "http://"+ip+"/api/no-user/faceLog/logs?page=0&size=6&sort=id,desc&cameraId=" + carmerID + "&status=1";
	string data1 = http1->RequestJsonInfo(url1, Hr_Get, "", "");
	//string data = "[{\"id\":2,\"photo\":\"api/images/461a56a4601c473e8741e7e6b73d03b6.jpg\",\"facePhoto\":\"api/images/cd2f8d54d8e243dfa35a1f870259722a.jpg\",\"createTime\":1556273068000,\"idCard\":\"111111111111111111\",\"status\":2,\"name\":\"陈宪健\",\"phone\":\"1111111111111\",\"des\":\"111111111111111\",\"embedding\":\"[-1.4400152, 0.6451032, 0.26462752, 0.8746899, 0.7616573, 0.12596099, 0.41581962, 1.5276725, -0.09500391, 1.3876362, 0.5582243, 1.3334633, -0.053422146, 0.049011394, -0.08084988, -0.24895221, -1.5307465, -0.2116798, -0.7897842, -1.1556343, 0.14056468, -0.383689, -0.77851844, 0.34798175, 0.12052418, 1.0533867, -1.6406689, 0.08399878, -0.12226754, -1.0787009, -0.6320575, 0.80640334, -0.27722308, -1.0813888, 0.3196923, 1.090025, -0.119522445, 0.55493057, -1.0699246, 0.896727, -0.016724147, -1.8084097, -1.0954968, -0.85218924, 0.63309526, -1.2197611, -0.3253882, 0.095537, -0.2037911, 0.8378224, 0.20551485, 0.8411193, -0.8993344, 0.36239782, -0.11238221, -0.21173662, -0.8618795, 0.39230257, -0.34557402, 0.5781261, 0.23223306, -0.70313853, -0.44424152, -1.0264549, 1.2122614, -1.6785709, 0.14160953, -0.25385574, -0.08871183, 5.926024E-4, 1.0549128, -0.6085348, -0.7925954, 0.4296747, 1.785264, -1.5820162, -0.56400555, -0.74581194, -0.59807765, -0.9151723, -0.30307198, -0.25082204, 0.54143715, 0.9068881, 0.9321424, 1.436748, 0.9328728, -0.10053575, 0.63272995, -0.6901415, -0.48524547, -1.5114982, 0.4306901, -0.47728392, -1.3296751, 0.003629094, -0.4755606, 0.5449407, -0.10437643, -0.7138629, -0.49084467, -0.47800732, -1.1068153, 1.5120535, 1.2027247, -0.17286132, 0.7173601, -0.21513946, -0.53769904, 0.07073937, 1.2764431, 1.4738712, 1.0616833, -0.9517845, -0.1828427, 0.55302936, -0.64688075, -2.5741053, -0.025717663, -0.47037178, 0.50731015, -0.25604346, -0.2484658, -0.60240716, -0.6187598, -0.3259704, 0.3059408, 0.068544224]\"},{\"id\":3,\"photo\":\"api/images/e04cd5981d864878b6466b10deb7b8d2.jpg\",\"facePhoto\":\"api/images/cc5a6444789d47ebb0d003bad8eee2b4.jpg\",\"createTime\":1556273106000,\"idCard\":\"111111111111111\",\"status\":2,\"name\":\"程强\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6404802, -0.22093289, 1.0782979, -0.85478085, 0.28959885, -0.42865416, 2.4096522, 1.087716, 1.3003848, -0.23982033, -0.68830997, -0.30421343, 0.2414809, 0.05102005, -1.0380512, -0.20419215, -0.378532, -0.4396497, -0.6643774, 1.2826979, 0.6125868, -1.0104938, -1.4237329, -0.2895159, -0.6213681, 0.90110457, -0.42795017, 2.9401104, 0.651558, 0.18393782, 0.9279308, 0.21969698, 0.36470965, -0.6922186, -0.012073857, 0.25392514, -1.0471017, -0.5521572, 0.18683052, -0.5803059, 0.6506972, -0.47329295, -1.3124616, -0.57661223, 1.6730458, -2.1885037, 0.3705211, 0.5600341, -1.1034927, 0.13028641, -1.1432753, -0.49627912, 0.734453, -0.52567196, 0.90518296, 1.3738246, -0.814132, -0.4398109, -0.012062972, -0.44503748, 0.32478613, 1.1393331, -1.3671409, -2.322604, -0.39067906, 0.6001213, 1.3304546, -0.7827779, -1.4596335, 0.6335447, 1.4796455, 1.4081497, -0.02153065, -0.5216898, 1.4645987, -1.0328634, -1.1962007, -0.8118608, -0.6475339, 1.9458501, 1.5541033, 0.7299879, 1.012298, -0.38899115, -0.09152084, -1.133778, -0.3999983, -0.30581298, -0.032933496, -0.7386391, -0.75189936, -0.04290776, 0.8782241, 0.3476032, -0.40590066, -0.18832871, 0.5013023, -1.1542698, 2.733139, -0.5518569, -0.989852, -1.4732974, -0.16870911, -0.26579535, -1.3444738, 0.010232242, -0.05290367, 0.4013139, -0.72583735, -0.9488756, -0.4201457, -1.0726483, -0.36929756, 0.028476134, -0.11291282, 0.30210528, 1.3160098, -1.6151779, -1.5262147, 1.7515954, 0.27571, 0.028027575, 0.60790306, -0.6632895, -0.93875384, 0.017065791, -1.6518697, 0.3973762]\"},{\"id\":4,\"photo\":\"api/images/056252fa11214b68a51d89a42a28d724.jpg\",\"facePhoto\":\"api/images/3a9ee070937b4e46aeaf4e32bc844567.jpg\",\"createTime\":1556273155000,\"idCard\":\"123123123123123\",\"status\":2,\"name\":\"杲晓明\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6890682, 0.83005565, 0.7006356, 0.3311335, -0.12386112, 0.9869977, -0.06567064, 0.60920954, 0.6317558, 1.893698, 0.21982354, 0.9589652, -1.4285797, 0.016681777, -0.69641584, -0.99923694, -0.3953585, -0.57902104, -0.15947005, 0.27743968, 0.48125544, -0.45871466, -0.50133455, -1.097203, 0.17049785, 0.51938206, -0.3458928, 0.21425974, -0.55479985, -0.08390793, 0.70241725, 0.9639671, -0.61285084, 0.3430673, 0.057332106, 0.4377386, -0.14971587, 1.1943835, 0.30472887, -0.24789484, 0.079794735, 1.796334, -0.040973317, -0.16625158, 0.785094, -2.2889516, 0.041496616, -0.71363354, 0.25319573, 0.22366717, 1.4287205, 0.71428764, -0.569214, 0.45967925, -0.737188, -0.33287716, -0.51986027, 0.74351734, 0.4765597, 0.17935231, -0.4052171, -0.36782515, 1.3702238, 1.180208, 0.21746162, 0.42260012, 0.37098595, 0.8658466, -0.049795475, 0.525717, 1.2834991, 0.5977808, -0.3160711, -0.23754853, 0.67487776, -0.0518094, -0.27718145, -0.6687922, 0.35178167, 0.53039175, 0.46359745, -0.5255458, 0.22821343, 0.3972479, -0.10988712, -0.5918918, 0.93664443, -0.4474239, 0.0032964705, -0.16739267, 0.32779092, -0.74358565, 1.518196, -0.27301902, 0.247744, 0.6153093, 0.48755342, 0.5647949, -1.2802047, -0.056567706, -0.5591072, 0.48177135, -0.796297, 0.04460408, 0.6490855, -0.062658, 0.76664984, -0.1611926, -0.33028632, 2.1852252, 0.5602745, -0.40043783, -0.40872905, 0.611992, -0.3847778, -1.4501771, -0.7642981, -0.8892275, -0.3013271, 0.5603079, 0.23014343, 0.31345668, 0.45210618, 1.1263101, 0.25600913, -0.5291169, 0.9897624, 0.39862493]\"},{\"id\":5,\"photo\":\"api/images/574012838a704472afca7488bb81c957.jpg\",\"facePhoto\":\"api/images/2f0d7ca7d949427f8c1585ced2c4e18c.jpg\",\"createTime\":1556273173000,\"idCard\":\"11131231231231231\",\"status\":2,\"name\":\"何玲\",\"phone\":\"123123123123123\",\"des\":\"\",\"embedding\":\"[1.0548526, -0.8521152, 0.79311955, 0.08578889, -0.33439085, -0.61195964, 0.18195026, 0.32265082, 0.07678358, -0.15060125, 0.7908881, 0.08451626, 0.03540916, -1.3073689, 0.8191194, -1.1959053, 0.23474371, 0.9908264, -0.18675777, -0.034923397, 1.3173224, -0.3254641, -2.4103897, -0.33821493, 0.84148383, -0.16962627, 0.19722573, 1.1229166, 0.46900302, 1.2516091, 1.1574138, -0.9351172, -0.5345119, -1.2762827, 1.0037024, 0.28555828, 0.65660095, -1.0713087, -1.6549762, -0.33600378, -0.6288224, -0.23781762, 0.62254834, -0.46636727, 0.8864793, -0.586428, 0.060618944, -1.4217057, 0.42536885, 0.96735, -0.0042176275, 0.38339567, 0.53973186, -0.06996329, 0.72109914, 1.7772502, -0.1590842, 0.537106, 1.0138521, -0.49714914, -1.688095, 1.2490373, -1.2618052, -0.5741497, 1.9095057, -0.9726699, 0.1982694, 0.036978435, 0.058657236, 0.2678928, -0.2387076, 0.17464152, 0.020080078, -0.49112776, -0.12188471, 0.1617636, 0.52396, -1.1321415, 1.0599047, 0.2822863, 2.1467776, 0.33926642, -0.7079503, 0.41453856, -0.65476614, -0.5910174, 0.93260765, -0.57118064, -0.5969466, 0.37894976, -0.13312545, -0.19008474, -0.8046749, 0.17795718, -1.2620711, 0.43180022, -0.020769747, -0.012535021, -0.106823295, -0.44050154, 0.3125924, -0.38561806, -1.5926973, 1.2190038, 0.38109505, 0.99247617, -0.942555, -0.54687774, 0.701352, -0.63406396, 0.82443595, -0.4982668, 0.13860318, 1.2869362, -1.4121718, 0.15624675, -1.3383298, -0.10845718, 0.17899749, -0.083091825, 0.20818913, 1.1549644, 1.4994057, 0.55030197, -1.0775876, -0.07484485, 0.2616936, 0.35043558]\"},{\"id\":6,\"photo\":\"api/images/b82890dd0fc3473fa1d780d980050a46.jpg\",\"facePhoto\":\"api/images/2c1ce23ecd264ec887c4eaec1d641559.jpg\",\"createTime\":1556273204000,\"idCard\":\"45135131234234123\",\"status\":2,\"name\":\"吴明宇\",\"phone\":\"3412341234\",\"des\":\"\",\"embedding\":\"[0.17067625, -0.6806514, -0.30767024, -0.2908418, -0.025509853, 1.420601, 0.5589702, 1.6246772, -1.3903996, 2.3691618, -0.30465293, 1.1151859, -0.7585342, -0.029459426, -0.5785202, -0.7252822, 0.27760524, 0.19998313, -3.586959, -0.6152935, -0.30069473, -0.89084804, 0.7328589, -0.017592505, -0.93534917, -0.8003881, -1.1031781, -0.58422816, -0.32800874, -1.425464, -0.14709054, 0.45678285, 1.0234568, -0.2896148, -0.042398337, -0.13264859, 0.81188786, -1.3668506, 0.7218537, 0.26653147, -0.09585937, 0.6988528, 0.2547587, -0.6691112, -0.8995134, -0.040217552, -1.1990551, 0.82440466, -0.39001322, 0.0014692359, 0.5035889, -1.4786457, -0.8907829, -1.3626045, -1.1225765, -0.83116955, 1.2374909, 0.5922378, -0.38960704, 0.7629879, -0.8746563, 0.01995349, 2.0040848, 0.45866835, -0.8963298, -0.76949835, 0.29105544, -0.80355066, 0.5213779, -0.9110299, 0.20435306, 0.89038545, -0.05313462, -1.1716405, 0.83845866, 0.2763683, -0.7777581, 0.7652084, 0.31850424, -1.4322191, 0.30776504, -0.9912002, -1.4179422, 1.3251332, 0.43514115, -0.9031695, -0.18410921, -1.316576, 0.32878152, -0.7540181, 1.1635334, -0.27642432, -1.4115477, 0.84543365, -1.1221458, -0.07010846, 0.52703536, -0.96692675, -0.58969396, 0.48734817, 1.4067193, -0.20626314, -0.31059396, 0.65692276, -0.7042123, -0.39387375, 1.9924076, 0.40968803, 0.2808323, 1.1361241, -0.14237618, -6.789584E-4, -0.41412714, 0.40198222, -0.08718496, 0.7950047, 1.4512724, 0.24288818, -0.2133232, -0.73981154, 0.7286097, 0.6204948, 0.6139743, -0.75372475, 0.40053138, -0.7972326, 1.104166, -0.11261107]\"},{\"id\":7,\"photo\":\"api/images/2de35ece38e94d76973d954d1ab90c7a.jpg\",\"facePhoto\":\"api/images/c3e88fdfe3a54ad5bdc5bf39d2a13151.jpg\",\"createTime\":1556273240000,\"idCard\":\"124125111511111\",\"status\":2,\"name\":\"袁璞\",\"phone\":\"13412341234\",\"des\":\"\",\"embedding\":\"[-2.025114, -0.25040734, -0.38396645, -0.05438198, 0.33327532, 0.4146087, 0.45094618, 1.1797194, 0.25294724, 0.99515617, 0.035760503, 0.88879216, 0.7482136, -0.9112992, 0.3612447, -0.10855479, -0.5739275, 0.075411975, -0.054131247, -0.21775049, 0.2851437, 0.1790575, -0.20084533, 0.9849472, 0.13843952, 0.06407902, 0.21239863, -0.24900094, 0.7528574, 0.83450705, -0.015042185, 0.061399247, -0.35061172, -0.1015756, -0.41192737, -0.9774467, -0.876451, 0.14792235, -0.4748804, 0.57042795, -0.86024034, 0.013399087, -1.3434957, -0.5809079, 1.2291933, 0.21384756, -0.60295326, -0.013907477, 0.035018258, 0.35013807, -1.0260556, 0.34296277, 0.2657627, 0.059378423, -0.1508429, 0.061466884, 0.08379524, -0.101631455, 0.21302709, -1.7497431, -0.30119517, 0.47428474, -0.8101081, 0.112537004, 0.12397413, -0.5527673, 0.39104852, -0.15613303, -0.26409993, -1.8372606, 1.3945122, -0.3200767, 0.31668946, 0.85930693, -0.011161889, -0.6898816, 0.49779847, -0.58778954, -0.92690444, 0.4110511, 0.509629, -0.34848163, -0.34927768, 0.5312836, 0.7344007, -0.085669115, 0.5556444, -0.30770284, -0.38169804, -0.39078367, 0.11851902, -1.293987, -0.6412762, 0.8475267, -0.6732441, -0.34533936, 0.5284727, 0.8669088, 0.5952963, -0.81767166, 0.13832496, 0.5507618, -1.1169083, -0.077078335, 1.1135011, -1.020442, -0.4459424, 0.18501139, 0.24825728, 0.51873225, 0.53400755, -0.15154883, 0.43417296, -0.92195606, -0.4612352, -0.5936926, -0.22849952, -0.46618667, -0.91859525, 0.3964869, 0.3569416, 0.72241116, 0.52069026, 0.32918438, -0.58234847, -0.3143721, 0.093173645, -0.07923526]\"},{\"id\":8,\"photo\":\"api/images/cd970b28e2fc44568cb376b64ee80b17.jpg\",\"facePhoto\":\"api/images/1687d31b195749debaca4cfdc0518584.jpg\",\"createTime\":1556273264000,\"idCard\":\"512412341234123\",\"status\":2,\"name\":\"于博成\",\"phone\":\"1111111111111\",\"des\":\"\",\"embedding\":\"[-1.8957708, 1.2380171, -0.7075868, 0.13583075, -0.5764373, -0.6842059, 0.5560215, 0.7682434, 0.42950463, 0.78963614, -0.19079353, 0.3845071, 0.56551284, 0.54654855, 0.3289345, -0.36228114, -1.7874331, 0.8266117, -0.80209225, -0.7515898, 0.05194748, 1.6076427, 0.6674606, -0.5753246, 0.016393762, 1.5582179, 0.61432546, 0.8414924, -0.6054566, -0.23399325, -0.6752211, 1.261782, -1.1481024, -0.9664495, 0.61196464, 1.8745209, -0.52137995, -0.46800217, -1.7355286, 0.021180332, 0.6644944, -1.1193838, -2.3943553, 1.8209995, 0.40427303, -1.281945, -0.74529225, -0.6157363, -0.34174526, -0.9464881, 1.1505897, 0.52277094, -0.16448747, 0.7916364, -1.1729934, -0.07051295, -0.12855428, 0.49475184, 0.7742363, 0.033971347, 2.1757145, 0.02265473, 0.5746165, -1.086684, -0.20821461, 0.04113031, 0.15668818, 0.8506179, -0.719747, 0.83429116, 2.0890498, -0.62778556, -0.38589823, -0.2694681, 1.2149738, -0.7793955, -0.5157203, -0.5397245, 0.58981955, 0.058594488, 0.17601797, -0.6691642, 0.16288026, 0.5480775, -0.17568171, 0.69702655, 0.2936083, 0.3640346, 1.0852022, -1.5229648, 0.52993274, -0.9364619, 0.07792295, -0.31929722, -0.99926156, 0.6445487, 0.1756084, 1.4737172, -0.29330215, -0.55977696, -0.99079204, -0.20782827, -0.43706945, 0.88271594, 0.17318526, 0.36490393, 0.87373894, -0.59372354, -0.40144062, 2.168316, -0.5776743, 0.19815661, 1.0640091, 0.3104119, -1.633867, -0.28243157, -0.8745168, -0.98116785, -0.6210294, 0.34983432, 0.125388, -0.2632946, 0.05174572, 0.42122707, -0.27471107, -1.0916156, -1.0080075, 0.578455]\"},{\"id\":9,\"photo\":\"api/images/f2417eba4c17478b90c33b4f864aff95.jpg\",\"facePhoto\":\"api/images/8cadb11e27ff4897908b212d1103a16e.jpg\",\"createTime\":1556273288000,\"idCard\":\"12512512341234123\",\"status\":2,\"name\":\"龙明明\",\"phone\":\"123412341234\",\"des\":\"\",\"embedding\":\"[0.44670027, 0.47711518, 0.30061167, 0.65321344, 0.21203442, 1.4708812, -0.8549201, 1.4066112, -0.806957, 1.8819294, -0.44502196, 0.8487141, 1.0832174, -0.15317093, -0.24792106, -0.6357421, 0.18963176, -0.64953005, -1.1274177, -0.51533127, -0.0070767, 1.5493466, -0.95284903, -0.19356498, 0.88978803, 0.031156888, -1.0599252, 0.98180366, -0.6911489, 0.8396231, 0.57903576, 0.52218026, 0.11909889, -0.06431806, -0.4805849, -1.0138917, 0.66892654, 0.20090544, -0.7869635, 0.90649205, -0.6104538, -0.8030855, 0.2850986, -0.25693756, 0.032041434, -0.7846277, 1.1472446, -0.5030891, -0.8058, -0.16635521, -0.5401272, -0.4173988, -0.8184032, 0.061768696, -0.6400277, 0.15751314, -0.4962245, -0.12598921, 0.63462967, -0.02846437, 1.0028538, 0.53461283, 0.715558, -0.81926733, 0.46757832, -0.41998982, 0.49496967, 0.7967518, -0.81809783, -0.8277628, -0.7801564, -1.4615133, -1.641854, 1.5509491, 0.5107204, -0.0089637935, 1.1269283, -0.3729752, -0.60213083, -1.5646158, 0.8658311, -0.2880615, -0.83669555, 0.2506542, 0.7304282, 0.9616922, 0.27992362, 0.6653295, -0.2677699, -0.09706547, -1.0644097, -0.2266024, -0.119866475, 1.3931605, -0.46385476, -0.76801646, -0.8984536, -0.29962063, 0.23906702, -0.4567237, 0.29815853, -0.2542603, -0.3033785, 0.78531057, -0.28254575, 0.047785338, 1.2024982, 0.009695956, 1.1607183, 0.7044649, -1.0247152, -1.1246669, 2.061482, 0.8489972, 0.10765874, -0.47634673, 0.32217824, -0.5904369, -0.4126597, -1.5521736, -1.396946, 0.6108344, -0.28859258, 0.03170532, -0.65636885, -0.0023252019, -0.7470265, 0.18863833]\"},{\"id\":10,\"photo\":\"api/images/558e5f41512942aaa486c4bbdead4524.jpg\",\"facePhoto\":\"api/images/d144409682f146a3a50c9c9a42090c9d.jpg\",\"createTime\":1556273356000,\"idCard\":\"22222222223422222\",\"status\":2,\"name\":\"郑敏\",\"phone\":\"512112123412432\",\"des\":\"描述\",\"embedding\":\"[-1.2705379, 0.97272605, -0.26115018, -0.16281968, -1.3175406, 0.6918671, 0.10548785, 1.919105, 0.39216432, 1.8216234, 0.6886387, 0.12781304, 0.986165, 0.7486268, -0.40188447, -0.8616181, -0.6239805, 1.390204, -2.2447224, -0.7008109, 0.73550767, -0.1934011, -0.5215538, 0.23679818, 0.8834749, 1.821925, -1.036854, 0.2600256, -0.3664054, 0.87640077, 0.94565666, 0.106354, -0.36235335, -1.1005473, -1.1642582, 0.6205245, -0.37500128, 0.7654341, -1.3284116, 0.7271324, 0.041580714, -1.2850214, -0.7638897, -1.5782278, 0.2757073, -0.92630655, 0.88229, -0.48459494, -0.7198224, -0.86031383, 0.40005618, -0.9656633, -1.0715669, -0.14626183, -0.591917, -0.05051488, 0.14381668, 1.270731, 0.6096086, -1.0427833, 0.31992078, -0.16281052, -0.5520229, -0.18957126, 0.36711594, -0.46182317, -0.96185136, 1.3869293, -0.03258694, 0.738966, 2.1684983, -0.5385125, -0.837034, 0.013444913, 0.8092245, -0.34689274, 0.7217132, -0.060054064, -1.2614756, 0.59211975, 0.86528474, -1.4768215, -1.8513198, 0.5997342, -0.057285987, 1.6120651, 0.8018805, 1.422267, 2.6134458, -0.450779, -0.5298835, -2.0381556, -0.19731069, 1.5281116, -0.9798354, 0.92440516, -0.32210994, -0.5812523, 0.35116738, -0.87823546, -0.020298578, -0.26055726, -0.6473049, 0.8830585, 0.30997476, -1.6280615, 1.2031631, 0.051980987, -0.94828594, 0.2657793, -0.059501074, 0.48666567, 1.5730749, 1.2528563, -0.2808668, -0.7975759, 0.041079015, -0.60298073, -0.87126446, 0.5814031, 0.335678, 0.10227262, 0.86661595, 0.10926009, -0.8744264, -0.48095134, 0.65987295, -0.10931062]\"},{\"id\":11,\"photo\":\"api/images/22994cebef474536ac5bcaaed63574cd.jpg\",\"facePhoto\":\"api/images/9ebdd9747e4a498a995b584cb12e6aa2.jpg\",\"createTime\":1556423653000,\"idCard\":\"1111111111123123\",\"status\":2,\"name\":\"柯兆胜\",\"phone\":\"123123123\",\"des\":\"123123123\",\"embedding\":\"[-0.88478136, -0.9364144, 0.020074613, 0.46507397, 0.48283428, -0.08312523, -7.0207566E-4, 1.0774661, 0.3752172, 0.9828768, 0.9886745, -1.3429844, 0.102270156, 1.2597201, -0.6699962, -0.12045772, -0.49792784, -0.4067703, -0.7396564, 0.029053923, -0.37315887, 0.30700308, -0.26722515, 0.72933763, 0.9816463, -0.0127441045, -0.16315526, 0.9930612, 0.9405875, -0.30844277, 0.96967345, 1.054161, -0.5111444, -0.10090917, -0.8100174, 0.63141525, 1.1573294, -0.005752718, 0.12837794, -0.27695283, -0.24878253, -0.65949565, -0.6844268, -0.4396083, 1.6813154, -2.1243114, -0.18033198, -0.14027339, 0.36861464, -0.06770572, -1.0820371, 0.66258454, -1.1357725, 0.19694164, 1.0660864, -0.53525317, 0.5077574, -0.77945477, -0.5005513, 0.11733626, 0.80401725, -0.044621658, 1.2237746, -0.6720435, 0.7447997, 1.2965884, -1.10189, 0.25641418, -0.5004631, -0.47750965, 0.8506222, 0.5212792, -0.112385735, -0.9343806, 0.00926275, -0.0606956, 1.8311495, 0.1302433, -0.6987415, 0.91116923, -0.25119546, -0.6357224, 0.41400266, 0.882223, 0.050165564, 1.233042, 0.9884193, 0.18127128, 2.0411901, -1.5662789, 0.53425914, 0.29918, 1.1918974, 0.17087041, -0.28145126, 0.71836364, 1.3745381, -1.2150807, 0.5403514, -0.4172787, 0.1966333, 0.030770535, 1.0411296, -0.055893313, 0.3879124, 0.40983284, 0.75672174, 0.86866593, -0.35493457, -0.86776793, -0.8789889, -0.6188493, 1.1490949, 0.3438213, 0.37258753, 0.45162392, 0.9765615, -0.28553903, -0.36776483, -0.13909236, 0.8712856, -0.6621576, -0.12875515, -0.77087504, 0.1727076, -0.3746315, -0.8526034, -0.03900963]\"},{\"id\":12,\"photo\":\"api/images/3e88ecde4bf84bdfa22ebe13912f6857.jpg\",\"facePhoto\":\"api/images/1fa210763eec47bea5c126f7fef69f6c.jpg\",\"createTime\":1556423750000,\"idCard\":\"1111111111112455\",\"status\":0,\"name\":\"王晓明\",\"phone\":\"1222211222\",\"des\":\"2141234\",\"embedding\":\"[0.5904552, 0.392133, 0.6273588, -0.035062104, -0.58359337, -0.38603202, -0.16038927, 0.94903797, 0.85901475, 1.6477327, -0.25026438, 0.056801993, -0.5225454, 0.6869571, 0.36447877, -0.005410239, -1.1331189, -0.4085702, -1.0018805, -1.3500493, 0.44969025, 0.95017534, -0.76471007, 0.2398697, 0.06832751, 1.0894092, -1.0277284, 0.85925686, -0.68652356, -0.40186772, -0.16741236, 1.1333385, -0.410408, -0.8103515, 0.11414875, 1.3506052, 0.021311367, -0.5477903, -0.13682295, 0.15373914, -0.17419456, -0.7511337, -1.2838491, -0.3070808, -0.12520686, -1.8612369, -1.9584142, 0.010401951, -0.30004662, 0.47600836, -0.81903183, -0.11837021, -1.5935028, 0.66080236, 0.19542083, 1.3681872, 0.73582196, 0.7876307, 0.05564177, 0.5833237, -0.49768937, -0.19057551, 0.09440142, -0.7500294, 0.3759269, -1.1743342, -0.41677183, -0.29294163, 0.48637903, 1.0635406, 0.36985362, 0.10001303, 0.23846565, -0.22420995, 0.65601856, -2.0607715, 0.12485287, -0.15033881, 0.47381112, -0.9028754, 0.73505104, -0.4562845, -0.50631344, 1.1531782, 0.998448, 0.12003586, 0.93582517, -0.36567542, -0.16871153, -1.8613737, -0.6502634, -0.88411623, 1.9187392, -1.4994079, -1.906835, 0.33176753, 0.9923862, 0.9304077, -0.25830713, -0.6554393, 0.6057219, 0.51754755, 0.13026156, -0.64946795, 0.38328907, -0.19922571, 0.3179771, 0.05059095, -0.545264, 0.3878855, -0.28456366, 0.6687446, 0.28326344, 0.67916125, -0.22990547, 0.58050853, -0.08575891, -1.3997644, -0.24152803, -0.32741886, 0.13257872, -0.11886391, 1.2270269, -0.37283388, -0.580727, -0.7226151, 0.9678455, 0.13636494]\"}]";
	//解析json
	Json::Reader reader1;
	Json::Value DevJson1_;
	reader1.parse(data1, DevJson1_);

	Json::Value DevJson1 = DevJson1_["content"];
	int siNum1 = DevJson1.size();
	for (int j = 0; j < siNum1; j++)
	{
		//MessageBox(NULL, xx->GetName(), _T("随便啥x"), NULL);
		//string  bdurl = "https://img5.duitang.com/uploads/item/201411/25/20141125205123_UUmSd.jpeg";
		string username = DevJson1[j]["facePhoto"].asString();
		string bdurl = "http://"+ip+"/";
		bdurl += username;
		size_t len = bdurl.length();
		int nmlen = MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, NULL, 0);
		wchar_t* buffer = new wchar_t[nmlen];
		MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, buffer, nmlen);

		//获取识别人姓名
		string name = DevJson1[j]["name"].asString();
		size_t namelen = name.length();
		int nameLenth = MultiByteToWideChar(CP_ACP, 0, name.c_str(), namelen + 1, NULL, 0);
		wchar_t* nameStr = new wchar_t[nameLenth];
		MultiByteToWideChar(CP_UTF8, 0, name.c_str(), len + 1, nameStr, nameLenth);
		LPCTSTR LnameStr = (LPCTSTR)nameStr;

		vector<string> v = split(username, "/"); //可按多个字符来分隔;
		string jpg = v[2];
		string count = ("D:\\tmp\\skybl" + jpg);
		const char* count1 = count.c_str();
		int dataLen1 = MultiByteToWideChar(0, 0, count1, -1, NULL, 0);
		wchar_t *dataStr1 = new wchar_t[dataLen1];
		MultiByteToWideChar(0, 0, count1, -1, dataStr1, dataLen1);
		LPCTSTR Ls = (LPCTSTR)dataStr1;

		HRESULT hr = URLDownloadToFile(NULL, buffer, _T(s), 0, NULL);
		if (SUCCEEDED(hr))
		{
			string num = to_string(j);
			string count = "bl";
			count += num;
			const char* data1 = count.c_str();
			int dataLen = MultiByteToWideChar(0, 0, data1, -1, NULL, 0);
			wchar_t *dataStr = new wchar_t[dataLen];
			MultiByteToWideChar(0, 0, data1, -1, dataStr, dataLen);
			LPCTSTR LnodesStr = (LPCTSTR)dataStr;
			CLabelUI* xx = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T(nodesStr)));
			xx->SetBkImage(_T(s));
			xx->SetText(_T(nameStr));
		}
		bHandled = TRUE;
		//MessageBox(NULL, _T(s), _T(s), 0);
	}

	//==========================================陌生人=================================================
	////发送http请求--get方式
	CWininetHttp*http2 = new CWininetHttp();
	string url2 = "http://"+ip+"/api/no-user/faceLog/logs?page=0&size=6&sort=id,desc&cameraId=" + carmerID + "&status=3";
	string data2 = http2->RequestJsonInfo(url2, Hr_Get, "", "");
	//string data = "[{\"id\":2,\"photo\":\"api/images/461a56a4601c473e8741e7e6b73d03b6.jpg\",\"facePhoto\":\"api/images/cd2f8d54d8e243dfa35a1f870259722a.jpg\",\"createTime\":1556273068000,\"idCard\":\"111111111111111111\",\"status\":2,\"name\":\"陈宪健\",\"phone\":\"1111111111111\",\"des\":\"111111111111111\",\"embedding\":\"[-1.4400152, 0.6451032, 0.26462752, 0.8746899, 0.7616573, 0.12596099, 0.41581962, 1.5276725, -0.09500391, 1.3876362, 0.5582243, 1.3334633, -0.053422146, 0.049011394, -0.08084988, -0.24895221, -1.5307465, -0.2116798, -0.7897842, -1.1556343, 0.14056468, -0.383689, -0.77851844, 0.34798175, 0.12052418, 1.0533867, -1.6406689, 0.08399878, -0.12226754, -1.0787009, -0.6320575, 0.80640334, -0.27722308, -1.0813888, 0.3196923, 1.090025, -0.119522445, 0.55493057, -1.0699246, 0.896727, -0.016724147, -1.8084097, -1.0954968, -0.85218924, 0.63309526, -1.2197611, -0.3253882, 0.095537, -0.2037911, 0.8378224, 0.20551485, 0.8411193, -0.8993344, 0.36239782, -0.11238221, -0.21173662, -0.8618795, 0.39230257, -0.34557402, 0.5781261, 0.23223306, -0.70313853, -0.44424152, -1.0264549, 1.2122614, -1.6785709, 0.14160953, -0.25385574, -0.08871183, 5.926024E-4, 1.0549128, -0.6085348, -0.7925954, 0.4296747, 1.785264, -1.5820162, -0.56400555, -0.74581194, -0.59807765, -0.9151723, -0.30307198, -0.25082204, 0.54143715, 0.9068881, 0.9321424, 1.436748, 0.9328728, -0.10053575, 0.63272995, -0.6901415, -0.48524547, -1.5114982, 0.4306901, -0.47728392, -1.3296751, 0.003629094, -0.4755606, 0.5449407, -0.10437643, -0.7138629, -0.49084467, -0.47800732, -1.1068153, 1.5120535, 1.2027247, -0.17286132, 0.7173601, -0.21513946, -0.53769904, 0.07073937, 1.2764431, 1.4738712, 1.0616833, -0.9517845, -0.1828427, 0.55302936, -0.64688075, -2.5741053, -0.025717663, -0.47037178, 0.50731015, -0.25604346, -0.2484658, -0.60240716, -0.6187598, -0.3259704, 0.3059408, 0.068544224]\"},{\"id\":3,\"photo\":\"api/images/e04cd5981d864878b6466b10deb7b8d2.jpg\",\"facePhoto\":\"api/images/cc5a6444789d47ebb0d003bad8eee2b4.jpg\",\"createTime\":1556273106000,\"idCard\":\"111111111111111\",\"status\":2,\"name\":\"程强\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6404802, -0.22093289, 1.0782979, -0.85478085, 0.28959885, -0.42865416, 2.4096522, 1.087716, 1.3003848, -0.23982033, -0.68830997, -0.30421343, 0.2414809, 0.05102005, -1.0380512, -0.20419215, -0.378532, -0.4396497, -0.6643774, 1.2826979, 0.6125868, -1.0104938, -1.4237329, -0.2895159, -0.6213681, 0.90110457, -0.42795017, 2.9401104, 0.651558, 0.18393782, 0.9279308, 0.21969698, 0.36470965, -0.6922186, -0.012073857, 0.25392514, -1.0471017, -0.5521572, 0.18683052, -0.5803059, 0.6506972, -0.47329295, -1.3124616, -0.57661223, 1.6730458, -2.1885037, 0.3705211, 0.5600341, -1.1034927, 0.13028641, -1.1432753, -0.49627912, 0.734453, -0.52567196, 0.90518296, 1.3738246, -0.814132, -0.4398109, -0.012062972, -0.44503748, 0.32478613, 1.1393331, -1.3671409, -2.322604, -0.39067906, 0.6001213, 1.3304546, -0.7827779, -1.4596335, 0.6335447, 1.4796455, 1.4081497, -0.02153065, -0.5216898, 1.4645987, -1.0328634, -1.1962007, -0.8118608, -0.6475339, 1.9458501, 1.5541033, 0.7299879, 1.012298, -0.38899115, -0.09152084, -1.133778, -0.3999983, -0.30581298, -0.032933496, -0.7386391, -0.75189936, -0.04290776, 0.8782241, 0.3476032, -0.40590066, -0.18832871, 0.5013023, -1.1542698, 2.733139, -0.5518569, -0.989852, -1.4732974, -0.16870911, -0.26579535, -1.3444738, 0.010232242, -0.05290367, 0.4013139, -0.72583735, -0.9488756, -0.4201457, -1.0726483, -0.36929756, 0.028476134, -0.11291282, 0.30210528, 1.3160098, -1.6151779, -1.5262147, 1.7515954, 0.27571, 0.028027575, 0.60790306, -0.6632895, -0.93875384, 0.017065791, -1.6518697, 0.3973762]\"},{\"id\":4,\"photo\":\"api/images/056252fa11214b68a51d89a42a28d724.jpg\",\"facePhoto\":\"api/images/3a9ee070937b4e46aeaf4e32bc844567.jpg\",\"createTime\":1556273155000,\"idCard\":\"123123123123123\",\"status\":2,\"name\":\"杲晓明\",\"phone\":\"1111111111\",\"des\":\"\",\"embedding\":\"[0.6890682, 0.83005565, 0.7006356, 0.3311335, -0.12386112, 0.9869977, -0.06567064, 0.60920954, 0.6317558, 1.893698, 0.21982354, 0.9589652, -1.4285797, 0.016681777, -0.69641584, -0.99923694, -0.3953585, -0.57902104, -0.15947005, 0.27743968, 0.48125544, -0.45871466, -0.50133455, -1.097203, 0.17049785, 0.51938206, -0.3458928, 0.21425974, -0.55479985, -0.08390793, 0.70241725, 0.9639671, -0.61285084, 0.3430673, 0.057332106, 0.4377386, -0.14971587, 1.1943835, 0.30472887, -0.24789484, 0.079794735, 1.796334, -0.040973317, -0.16625158, 0.785094, -2.2889516, 0.041496616, -0.71363354, 0.25319573, 0.22366717, 1.4287205, 0.71428764, -0.569214, 0.45967925, -0.737188, -0.33287716, -0.51986027, 0.74351734, 0.4765597, 0.17935231, -0.4052171, -0.36782515, 1.3702238, 1.180208, 0.21746162, 0.42260012, 0.37098595, 0.8658466, -0.049795475, 0.525717, 1.2834991, 0.5977808, -0.3160711, -0.23754853, 0.67487776, -0.0518094, -0.27718145, -0.6687922, 0.35178167, 0.53039175, 0.46359745, -0.5255458, 0.22821343, 0.3972479, -0.10988712, -0.5918918, 0.93664443, -0.4474239, 0.0032964705, -0.16739267, 0.32779092, -0.74358565, 1.518196, -0.27301902, 0.247744, 0.6153093, 0.48755342, 0.5647949, -1.2802047, -0.056567706, -0.5591072, 0.48177135, -0.796297, 0.04460408, 0.6490855, -0.062658, 0.76664984, -0.1611926, -0.33028632, 2.1852252, 0.5602745, -0.40043783, -0.40872905, 0.611992, -0.3847778, -1.4501771, -0.7642981, -0.8892275, -0.3013271, 0.5603079, 0.23014343, 0.31345668, 0.45210618, 1.1263101, 0.25600913, -0.5291169, 0.9897624, 0.39862493]\"},{\"id\":5,\"photo\":\"api/images/574012838a704472afca7488bb81c957.jpg\",\"facePhoto\":\"api/images/2f0d7ca7d949427f8c1585ced2c4e18c.jpg\",\"createTime\":1556273173000,\"idCard\":\"11131231231231231\",\"status\":2,\"name\":\"何玲\",\"phone\":\"123123123123123\",\"des\":\"\",\"embedding\":\"[1.0548526, -0.8521152, 0.79311955, 0.08578889, -0.33439085, -0.61195964, 0.18195026, 0.32265082, 0.07678358, -0.15060125, 0.7908881, 0.08451626, 0.03540916, -1.3073689, 0.8191194, -1.1959053, 0.23474371, 0.9908264, -0.18675777, -0.034923397, 1.3173224, -0.3254641, -2.4103897, -0.33821493, 0.84148383, -0.16962627, 0.19722573, 1.1229166, 0.46900302, 1.2516091, 1.1574138, -0.9351172, -0.5345119, -1.2762827, 1.0037024, 0.28555828, 0.65660095, -1.0713087, -1.6549762, -0.33600378, -0.6288224, -0.23781762, 0.62254834, -0.46636727, 0.8864793, -0.586428, 0.060618944, -1.4217057, 0.42536885, 0.96735, -0.0042176275, 0.38339567, 0.53973186, -0.06996329, 0.72109914, 1.7772502, -0.1590842, 0.537106, 1.0138521, -0.49714914, -1.688095, 1.2490373, -1.2618052, -0.5741497, 1.9095057, -0.9726699, 0.1982694, 0.036978435, 0.058657236, 0.2678928, -0.2387076, 0.17464152, 0.020080078, -0.49112776, -0.12188471, 0.1617636, 0.52396, -1.1321415, 1.0599047, 0.2822863, 2.1467776, 0.33926642, -0.7079503, 0.41453856, -0.65476614, -0.5910174, 0.93260765, -0.57118064, -0.5969466, 0.37894976, -0.13312545, -0.19008474, -0.8046749, 0.17795718, -1.2620711, 0.43180022, -0.020769747, -0.012535021, -0.106823295, -0.44050154, 0.3125924, -0.38561806, -1.5926973, 1.2190038, 0.38109505, 0.99247617, -0.942555, -0.54687774, 0.701352, -0.63406396, 0.82443595, -0.4982668, 0.13860318, 1.2869362, -1.4121718, 0.15624675, -1.3383298, -0.10845718, 0.17899749, -0.083091825, 0.20818913, 1.1549644, 1.4994057, 0.55030197, -1.0775876, -0.07484485, 0.2616936, 0.35043558]\"},{\"id\":6,\"photo\":\"api/images/b82890dd0fc3473fa1d780d980050a46.jpg\",\"facePhoto\":\"api/images/2c1ce23ecd264ec887c4eaec1d641559.jpg\",\"createTime\":1556273204000,\"idCard\":\"45135131234234123\",\"status\":2,\"name\":\"吴明宇\",\"phone\":\"3412341234\",\"des\":\"\",\"embedding\":\"[0.17067625, -0.6806514, -0.30767024, -0.2908418, -0.025509853, 1.420601, 0.5589702, 1.6246772, -1.3903996, 2.3691618, -0.30465293, 1.1151859, -0.7585342, -0.029459426, -0.5785202, -0.7252822, 0.27760524, 0.19998313, -3.586959, -0.6152935, -0.30069473, -0.89084804, 0.7328589, -0.017592505, -0.93534917, -0.8003881, -1.1031781, -0.58422816, -0.32800874, -1.425464, -0.14709054, 0.45678285, 1.0234568, -0.2896148, -0.042398337, -0.13264859, 0.81188786, -1.3668506, 0.7218537, 0.26653147, -0.09585937, 0.6988528, 0.2547587, -0.6691112, -0.8995134, -0.040217552, -1.1990551, 0.82440466, -0.39001322, 0.0014692359, 0.5035889, -1.4786457, -0.8907829, -1.3626045, -1.1225765, -0.83116955, 1.2374909, 0.5922378, -0.38960704, 0.7629879, -0.8746563, 0.01995349, 2.0040848, 0.45866835, -0.8963298, -0.76949835, 0.29105544, -0.80355066, 0.5213779, -0.9110299, 0.20435306, 0.89038545, -0.05313462, -1.1716405, 0.83845866, 0.2763683, -0.7777581, 0.7652084, 0.31850424, -1.4322191, 0.30776504, -0.9912002, -1.4179422, 1.3251332, 0.43514115, -0.9031695, -0.18410921, -1.316576, 0.32878152, -0.7540181, 1.1635334, -0.27642432, -1.4115477, 0.84543365, -1.1221458, -0.07010846, 0.52703536, -0.96692675, -0.58969396, 0.48734817, 1.4067193, -0.20626314, -0.31059396, 0.65692276, -0.7042123, -0.39387375, 1.9924076, 0.40968803, 0.2808323, 1.1361241, -0.14237618, -6.789584E-4, -0.41412714, 0.40198222, -0.08718496, 0.7950047, 1.4512724, 0.24288818, -0.2133232, -0.73981154, 0.7286097, 0.6204948, 0.6139743, -0.75372475, 0.40053138, -0.7972326, 1.104166, -0.11261107]\"},{\"id\":7,\"photo\":\"api/images/2de35ece38e94d76973d954d1ab90c7a.jpg\",\"facePhoto\":\"api/images/c3e88fdfe3a54ad5bdc5bf39d2a13151.jpg\",\"createTime\":1556273240000,\"idCard\":\"124125111511111\",\"status\":2,\"name\":\"袁璞\",\"phone\":\"13412341234\",\"des\":\"\",\"embedding\":\"[-2.025114, -0.25040734, -0.38396645, -0.05438198, 0.33327532, 0.4146087, 0.45094618, 1.1797194, 0.25294724, 0.99515617, 0.035760503, 0.88879216, 0.7482136, -0.9112992, 0.3612447, -0.10855479, -0.5739275, 0.075411975, -0.054131247, -0.21775049, 0.2851437, 0.1790575, -0.20084533, 0.9849472, 0.13843952, 0.06407902, 0.21239863, -0.24900094, 0.7528574, 0.83450705, -0.015042185, 0.061399247, -0.35061172, -0.1015756, -0.41192737, -0.9774467, -0.876451, 0.14792235, -0.4748804, 0.57042795, -0.86024034, 0.013399087, -1.3434957, -0.5809079, 1.2291933, 0.21384756, -0.60295326, -0.013907477, 0.035018258, 0.35013807, -1.0260556, 0.34296277, 0.2657627, 0.059378423, -0.1508429, 0.061466884, 0.08379524, -0.101631455, 0.21302709, -1.7497431, -0.30119517, 0.47428474, -0.8101081, 0.112537004, 0.12397413, -0.5527673, 0.39104852, -0.15613303, -0.26409993, -1.8372606, 1.3945122, -0.3200767, 0.31668946, 0.85930693, -0.011161889, -0.6898816, 0.49779847, -0.58778954, -0.92690444, 0.4110511, 0.509629, -0.34848163, -0.34927768, 0.5312836, 0.7344007, -0.085669115, 0.5556444, -0.30770284, -0.38169804, -0.39078367, 0.11851902, -1.293987, -0.6412762, 0.8475267, -0.6732441, -0.34533936, 0.5284727, 0.8669088, 0.5952963, -0.81767166, 0.13832496, 0.5507618, -1.1169083, -0.077078335, 1.1135011, -1.020442, -0.4459424, 0.18501139, 0.24825728, 0.51873225, 0.53400755, -0.15154883, 0.43417296, -0.92195606, -0.4612352, -0.5936926, -0.22849952, -0.46618667, -0.91859525, 0.3964869, 0.3569416, 0.72241116, 0.52069026, 0.32918438, -0.58234847, -0.3143721, 0.093173645, -0.07923526]\"},{\"id\":8,\"photo\":\"api/images/cd970b28e2fc44568cb376b64ee80b17.jpg\",\"facePhoto\":\"api/images/1687d31b195749debaca4cfdc0518584.jpg\",\"createTime\":1556273264000,\"idCard\":\"512412341234123\",\"status\":2,\"name\":\"于博成\",\"phone\":\"1111111111111\",\"des\":\"\",\"embedding\":\"[-1.8957708, 1.2380171, -0.7075868, 0.13583075, -0.5764373, -0.6842059, 0.5560215, 0.7682434, 0.42950463, 0.78963614, -0.19079353, 0.3845071, 0.56551284, 0.54654855, 0.3289345, -0.36228114, -1.7874331, 0.8266117, -0.80209225, -0.7515898, 0.05194748, 1.6076427, 0.6674606, -0.5753246, 0.016393762, 1.5582179, 0.61432546, 0.8414924, -0.6054566, -0.23399325, -0.6752211, 1.261782, -1.1481024, -0.9664495, 0.61196464, 1.8745209, -0.52137995, -0.46800217, -1.7355286, 0.021180332, 0.6644944, -1.1193838, -2.3943553, 1.8209995, 0.40427303, -1.281945, -0.74529225, -0.6157363, -0.34174526, -0.9464881, 1.1505897, 0.52277094, -0.16448747, 0.7916364, -1.1729934, -0.07051295, -0.12855428, 0.49475184, 0.7742363, 0.033971347, 2.1757145, 0.02265473, 0.5746165, -1.086684, -0.20821461, 0.04113031, 0.15668818, 0.8506179, -0.719747, 0.83429116, 2.0890498, -0.62778556, -0.38589823, -0.2694681, 1.2149738, -0.7793955, -0.5157203, -0.5397245, 0.58981955, 0.058594488, 0.17601797, -0.6691642, 0.16288026, 0.5480775, -0.17568171, 0.69702655, 0.2936083, 0.3640346, 1.0852022, -1.5229648, 0.52993274, -0.9364619, 0.07792295, -0.31929722, -0.99926156, 0.6445487, 0.1756084, 1.4737172, -0.29330215, -0.55977696, -0.99079204, -0.20782827, -0.43706945, 0.88271594, 0.17318526, 0.36490393, 0.87373894, -0.59372354, -0.40144062, 2.168316, -0.5776743, 0.19815661, 1.0640091, 0.3104119, -1.633867, -0.28243157, -0.8745168, -0.98116785, -0.6210294, 0.34983432, 0.125388, -0.2632946, 0.05174572, 0.42122707, -0.27471107, -1.0916156, -1.0080075, 0.578455]\"},{\"id\":9,\"photo\":\"api/images/f2417eba4c17478b90c33b4f864aff95.jpg\",\"facePhoto\":\"api/images/8cadb11e27ff4897908b212d1103a16e.jpg\",\"createTime\":1556273288000,\"idCard\":\"12512512341234123\",\"status\":2,\"name\":\"龙明明\",\"phone\":\"123412341234\",\"des\":\"\",\"embedding\":\"[0.44670027, 0.47711518, 0.30061167, 0.65321344, 0.21203442, 1.4708812, -0.8549201, 1.4066112, -0.806957, 1.8819294, -0.44502196, 0.8487141, 1.0832174, -0.15317093, -0.24792106, -0.6357421, 0.18963176, -0.64953005, -1.1274177, -0.51533127, -0.0070767, 1.5493466, -0.95284903, -0.19356498, 0.88978803, 0.031156888, -1.0599252, 0.98180366, -0.6911489, 0.8396231, 0.57903576, 0.52218026, 0.11909889, -0.06431806, -0.4805849, -1.0138917, 0.66892654, 0.20090544, -0.7869635, 0.90649205, -0.6104538, -0.8030855, 0.2850986, -0.25693756, 0.032041434, -0.7846277, 1.1472446, -0.5030891, -0.8058, -0.16635521, -0.5401272, -0.4173988, -0.8184032, 0.061768696, -0.6400277, 0.15751314, -0.4962245, -0.12598921, 0.63462967, -0.02846437, 1.0028538, 0.53461283, 0.715558, -0.81926733, 0.46757832, -0.41998982, 0.49496967, 0.7967518, -0.81809783, -0.8277628, -0.7801564, -1.4615133, -1.641854, 1.5509491, 0.5107204, -0.0089637935, 1.1269283, -0.3729752, -0.60213083, -1.5646158, 0.8658311, -0.2880615, -0.83669555, 0.2506542, 0.7304282, 0.9616922, 0.27992362, 0.6653295, -0.2677699, -0.09706547, -1.0644097, -0.2266024, -0.119866475, 1.3931605, -0.46385476, -0.76801646, -0.8984536, -0.29962063, 0.23906702, -0.4567237, 0.29815853, -0.2542603, -0.3033785, 0.78531057, -0.28254575, 0.047785338, 1.2024982, 0.009695956, 1.1607183, 0.7044649, -1.0247152, -1.1246669, 2.061482, 0.8489972, 0.10765874, -0.47634673, 0.32217824, -0.5904369, -0.4126597, -1.5521736, -1.396946, 0.6108344, -0.28859258, 0.03170532, -0.65636885, -0.0023252019, -0.7470265, 0.18863833]\"},{\"id\":10,\"photo\":\"api/images/558e5f41512942aaa486c4bbdead4524.jpg\",\"facePhoto\":\"api/images/d144409682f146a3a50c9c9a42090c9d.jpg\",\"createTime\":1556273356000,\"idCard\":\"22222222223422222\",\"status\":2,\"name\":\"郑敏\",\"phone\":\"512112123412432\",\"des\":\"描述\",\"embedding\":\"[-1.2705379, 0.97272605, -0.26115018, -0.16281968, -1.3175406, 0.6918671, 0.10548785, 1.919105, 0.39216432, 1.8216234, 0.6886387, 0.12781304, 0.986165, 0.7486268, -0.40188447, -0.8616181, -0.6239805, 1.390204, -2.2447224, -0.7008109, 0.73550767, -0.1934011, -0.5215538, 0.23679818, 0.8834749, 1.821925, -1.036854, 0.2600256, -0.3664054, 0.87640077, 0.94565666, 0.106354, -0.36235335, -1.1005473, -1.1642582, 0.6205245, -0.37500128, 0.7654341, -1.3284116, 0.7271324, 0.041580714, -1.2850214, -0.7638897, -1.5782278, 0.2757073, -0.92630655, 0.88229, -0.48459494, -0.7198224, -0.86031383, 0.40005618, -0.9656633, -1.0715669, -0.14626183, -0.591917, -0.05051488, 0.14381668, 1.270731, 0.6096086, -1.0427833, 0.31992078, -0.16281052, -0.5520229, -0.18957126, 0.36711594, -0.46182317, -0.96185136, 1.3869293, -0.03258694, 0.738966, 2.1684983, -0.5385125, -0.837034, 0.013444913, 0.8092245, -0.34689274, 0.7217132, -0.060054064, -1.2614756, 0.59211975, 0.86528474, -1.4768215, -1.8513198, 0.5997342, -0.057285987, 1.6120651, 0.8018805, 1.422267, 2.6134458, -0.450779, -0.5298835, -2.0381556, -0.19731069, 1.5281116, -0.9798354, 0.92440516, -0.32210994, -0.5812523, 0.35116738, -0.87823546, -0.020298578, -0.26055726, -0.6473049, 0.8830585, 0.30997476, -1.6280615, 1.2031631, 0.051980987, -0.94828594, 0.2657793, -0.059501074, 0.48666567, 1.5730749, 1.2528563, -0.2808668, -0.7975759, 0.041079015, -0.60298073, -0.87126446, 0.5814031, 0.335678, 0.10227262, 0.86661595, 0.10926009, -0.8744264, -0.48095134, 0.65987295, -0.10931062]\"},{\"id\":11,\"photo\":\"api/images/22994cebef474536ac5bcaaed63574cd.jpg\",\"facePhoto\":\"api/images/9ebdd9747e4a498a995b584cb12e6aa2.jpg\",\"createTime\":1556423653000,\"idCard\":\"1111111111123123\",\"status\":2,\"name\":\"柯兆胜\",\"phone\":\"123123123\",\"des\":\"123123123\",\"embedding\":\"[-0.88478136, -0.9364144, 0.020074613, 0.46507397, 0.48283428, -0.08312523, -7.0207566E-4, 1.0774661, 0.3752172, 0.9828768, 0.9886745, -1.3429844, 0.102270156, 1.2597201, -0.6699962, -0.12045772, -0.49792784, -0.4067703, -0.7396564, 0.029053923, -0.37315887, 0.30700308, -0.26722515, 0.72933763, 0.9816463, -0.0127441045, -0.16315526, 0.9930612, 0.9405875, -0.30844277, 0.96967345, 1.054161, -0.5111444, -0.10090917, -0.8100174, 0.63141525, 1.1573294, -0.005752718, 0.12837794, -0.27695283, -0.24878253, -0.65949565, -0.6844268, -0.4396083, 1.6813154, -2.1243114, -0.18033198, -0.14027339, 0.36861464, -0.06770572, -1.0820371, 0.66258454, -1.1357725, 0.19694164, 1.0660864, -0.53525317, 0.5077574, -0.77945477, -0.5005513, 0.11733626, 0.80401725, -0.044621658, 1.2237746, -0.6720435, 0.7447997, 1.2965884, -1.10189, 0.25641418, -0.5004631, -0.47750965, 0.8506222, 0.5212792, -0.112385735, -0.9343806, 0.00926275, -0.0606956, 1.8311495, 0.1302433, -0.6987415, 0.91116923, -0.25119546, -0.6357224, 0.41400266, 0.882223, 0.050165564, 1.233042, 0.9884193, 0.18127128, 2.0411901, -1.5662789, 0.53425914, 0.29918, 1.1918974, 0.17087041, -0.28145126, 0.71836364, 1.3745381, -1.2150807, 0.5403514, -0.4172787, 0.1966333, 0.030770535, 1.0411296, -0.055893313, 0.3879124, 0.40983284, 0.75672174, 0.86866593, -0.35493457, -0.86776793, -0.8789889, -0.6188493, 1.1490949, 0.3438213, 0.37258753, 0.45162392, 0.9765615, -0.28553903, -0.36776483, -0.13909236, 0.8712856, -0.6621576, -0.12875515, -0.77087504, 0.1727076, -0.3746315, -0.8526034, -0.03900963]\"},{\"id\":12,\"photo\":\"api/images/3e88ecde4bf84bdfa22ebe13912f6857.jpg\",\"facePhoto\":\"api/images/1fa210763eec47bea5c126f7fef69f6c.jpg\",\"createTime\":1556423750000,\"idCard\":\"1111111111112455\",\"status\":0,\"name\":\"王晓明\",\"phone\":\"1222211222\",\"des\":\"2141234\",\"embedding\":\"[0.5904552, 0.392133, 0.6273588, -0.035062104, -0.58359337, -0.38603202, -0.16038927, 0.94903797, 0.85901475, 1.6477327, -0.25026438, 0.056801993, -0.5225454, 0.6869571, 0.36447877, -0.005410239, -1.1331189, -0.4085702, -1.0018805, -1.3500493, 0.44969025, 0.95017534, -0.76471007, 0.2398697, 0.06832751, 1.0894092, -1.0277284, 0.85925686, -0.68652356, -0.40186772, -0.16741236, 1.1333385, -0.410408, -0.8103515, 0.11414875, 1.3506052, 0.021311367, -0.5477903, -0.13682295, 0.15373914, -0.17419456, -0.7511337, -1.2838491, -0.3070808, -0.12520686, -1.8612369, -1.9584142, 0.010401951, -0.30004662, 0.47600836, -0.81903183, -0.11837021, -1.5935028, 0.66080236, 0.19542083, 1.3681872, 0.73582196, 0.7876307, 0.05564177, 0.5833237, -0.49768937, -0.19057551, 0.09440142, -0.7500294, 0.3759269, -1.1743342, -0.41677183, -0.29294163, 0.48637903, 1.0635406, 0.36985362, 0.10001303, 0.23846565, -0.22420995, 0.65601856, -2.0607715, 0.12485287, -0.15033881, 0.47381112, -0.9028754, 0.73505104, -0.4562845, -0.50631344, 1.1531782, 0.998448, 0.12003586, 0.93582517, -0.36567542, -0.16871153, -1.8613737, -0.6502634, -0.88411623, 1.9187392, -1.4994079, -1.906835, 0.33176753, 0.9923862, 0.9304077, -0.25830713, -0.6554393, 0.6057219, 0.51754755, 0.13026156, -0.64946795, 0.38328907, -0.19922571, 0.3179771, 0.05059095, -0.545264, 0.3878855, -0.28456366, 0.6687446, 0.28326344, 0.67916125, -0.22990547, 0.58050853, -0.08575891, -1.3997644, -0.24152803, -0.32741886, 0.13257872, -0.11886391, 1.2270269, -0.37283388, -0.580727, -0.7226151, 0.9678455, 0.13636494]\"}]";
	//解析json
	Json::Reader reader2;
	Json::Value DevJson2_;
	reader2.parse(data2, DevJson2_);

	Json::Value DevJson2 = DevJson2_["content"];
	int siNum2 = DevJson2.size();
	for (int k = 0; k < siNum2; k++)
	{
		//MessageBox(NULL, xx->GetName(), _T("随便啥x"), NULL);
		//string  bdurl = "https://img5.duitang.com/uploads/item/201411/25/20141125205123_UUmSd.jpeg";5
		string logImg = DevJson2[k]["logImg"].asString();
		string bdurl = "http://"+ip+"/api/no-user/faceLog/subimages/"+ carmerID +"/";
		int x = DevJson2[k]["x"].asInt();
		int y = DevJson2[k]["y"].asInt();
		int width = DevJson2[k]["width"].asInt();
		int height = DevJson2[k]["height"].asInt();
		//http://192.168.100.126/api/no-user/faceLog/subimages/4/925107AFB4A9425BA6AF5B1A665B77E4.jpg?x=164&y=177&w=115&h=114
		bdurl += logImg;
		bdurl += "?x=";
		bdurl += to_string(x);
		bdurl += "&y=";
		bdurl += to_string(y);
		bdurl += "&w=";
		bdurl += to_string(width);
		bdurl += "&h=";
		bdurl += to_string(height);

		size_t len = bdurl.length();
		int nmlen = MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, NULL, 0);
		wchar_t* buffer = new wchar_t[nmlen];
		MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, buffer, nmlen);
		
		string count = ("D:\\tmp\\skyb" + logImg);
		const char* count1 = count.c_str();
		int dataLen1 = MultiByteToWideChar(0, 0, count1, -1, NULL, 0);
		wchar_t *dataStr1 = new wchar_t[dataLen1];
		MultiByteToWideChar(0, 0, count1, -1, dataStr1, dataLen1);
		LPCTSTR Ls = (LPCTSTR)dataStr1;

		HRESULT hr = URLDownloadToFile(NULL, buffer, _T(s), 0, NULL);
		if (SUCCEEDED(hr))
		{
			string num = to_string(k);
			string count = "b";
			count += num;
			const char* data1 = count.c_str();
			int dataLen = MultiByteToWideChar(0, 0, data1, -1, NULL, 0);
			wchar_t *dataStr = new wchar_t[dataLen];
			MultiByteToWideChar(0, 0, data1, -1, dataStr, dataLen);
			LPCTSTR LnodesStr = (LPCTSTR)dataStr;
			CLabelUI* xx = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T(nodesStr)));
			xx->SetBkImage(_T(s));
			xx->SetText(_T("陌生人"));
		}
		bHandled = TRUE;
		//MessageBox(NULL, _T(s), _T(s), 0);
	}
	//
	/*string directory = ("D:\\tmp\\");
	const char* directoryNum = directory.c_str();
	int directoryLen1 = MultiByteToWideChar(0, 0, directoryNum, -1, NULL, 0);
	wchar_t *directoryStr1 = new wchar_t[directoryLen1];
	MultiByteToWideChar(0, 0, directoryNum, -1, directoryStr1, directoryLen1);
	LPCWSTR s = (LPCWSTR)directoryStr1;
	RemoveDirectory(s);*/

	return 0;
}


LRESULT CDuiFrameWnd::HandleCustomMessage(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled)
{
	LRESULT lRes = 0;
	switch (uMsg)
	{
	case WM_TIMER: lRes = OnTimer(uMsg, wParam, lParam, bHandled); break;
	}
	bHandled = FALSE;

	return 0;
}

void CDuiFrameWnd::InitWindow()
{
    SetIcon(IDI_ICON1);

    // 根据分辨率自动调节窗口大小
    MONITORINFO oMonitor = {};
    oMonitor.cbSize = sizeof(oMonitor);
    ::GetMonitorInfo(::MonitorFromWindow(*this, MONITOR_DEFAULTTONEAREST), &oMonitor);
    AdaptWindowSize(oMonitor.rcMonitor.right - oMonitor.rcMonitor.left);
    ::GetWindowPlacement(*this, &m_OldWndPlacement);

    // 几个常用控件做为成员变量
    CSliderUI* pSilderVol = static_cast<CSliderUI*>(m_PaintManager.FindControl(_T("sliderVol")));
    m_pSliderPlay = static_cast<CSliderUI*>(m_PaintManager.FindControl(_T("sliderPlay")));
    m_pLabelTime  = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("labelPlayTime")));
    if (! pSilderVol || ! m_pSliderPlay || ! m_pLabelTime)
    {
        return;
    }
    pSilderVol->OnNotify    += MakeDelegate(this, &CDuiFrameWnd::OnVolumeChanged);
    m_pSliderPlay->OnNotify += MakeDelegate(this, &CDuiFrameWnd::OnPosChanged);

    // 设置播放器的窗口句柄和回调函数
    m_pPlayerMgr = static_cast<CPlayerLayoutUI*>(m_PaintManager.FindControl(_T("playerLayout")));
	
	//SetTimer(*this, 1, 500, NULL);
	//CTreeViewUI* listView = static_cast<CTreeViewUI*>(m_PaintManager.FindControl(_T("listView")));
	//CTreeViewUI* listView = static_cast<CTreeViewUI*>(m_PaintManager.FindControl(_T("listView")));

	//获取父元素节点
	CTreeNodeUI* pParentTree = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("parent")));
	//发送http请求--get方式
	CWininetHttp*http = new CWininetHttp();
	string url = ip+"/api/no-user/camera/all";
	string data = http->RequestJsonInfo(url, Hr_Get,"","");
	//string data = "[{\"id\":1,\"number\":\"253\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"展室-门口\",\"ip\":\"192.168.100.253\",\"port\":554,\"createTime\":1556094489000,\"status\":1},{\"id\":2,\"number\":\"252\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"办公室-门外\",\"ip\":\"192.168.100.252\",\"port\":554,\"createTime\":1556094535000,\"status\":1},{\"id\":3,\"number\":\"251\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"办公室-门内\",\"ip\":\"192.168.100.251\",\"port\":554,\"createTime\":1556094561000,\"status\":1},{\"id\":4,\"number\":\"1\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"测试1\",\"ip\":\"192.168.1.64\",\"port\":554,\"createTime\":1556368390000,\"status\":0},{\"id\":5,\"number\":\"2\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"测试2\",\"ip\":\"192.168.1.64\",\"port\":554,\"createTime\":1556368415000,\"status\":0},{\"id\":6,\"number\":\"3\",\"username\":\"admin\",\"password\":\"111111ab\",\"region\":\"测试3\",\"ip\":\"192.168.1.64\",\"port\":554,\"createTime\":1556368447000,\"status\":0}]";
	//解析json
	Json::Reader reader;
	Json::Value DevJson;
	reader.parse(data, DevJson);
	int siNum = DevJson.size();
	for (int i = 0; i < siNum; i++)
	{
		//获取接口的基本参数
		//Json::Value DevJson = DevJson[i];
		//int id = DevJson[i]["id"].asInt();
		string username = DevJson[i]["username"].asString();
		string password = DevJson[i]["password"].asString();
		string ip = DevJson[i]["ip"].asString();
		int port = DevJson[i]["port"].asInt();
		int id = DevJson[i]["id"].asInt();
		string portStr = to_string(port);
		//camera位置信息
		string region = DevJson[i]["region"].asString();

		int status = DevJson[i]["status"].asInt();
		//if (status == 1) {
			//rtsp://admin:111111ab@192.168.100.252:554
			//+username + ":" + password + "@" + ip + ":" + portStr
			string link = "rtsp://";
			link += username;
			link += ":";
			link += password;
			link += "@";
			link += ip;
			link += ":";
			link += portStr;
			//string先转成char类型
			const char* ch = link.c_str();
			//char转成LPCTSTR 类型
			int num = MultiByteToWideChar(0, 0, ch, -1, NULL, 0);
			wchar_t *wide = new wchar_t[num];
			MultiByteToWideChar(0, 0, ch, -1, wide, num);
			LPCTSTR   LlinkStr = (LPCTSTR)wide;
			//===================================================================
			cout << link << endl;//输出结果
			cout << LlinkStr << endl;//输出结果
			//===================================================================
			
			/*char c[20];
			string s = "1234";
			strcpy(c, s.c_str());*/
			const char* nameNode = region.c_str();
			int num1 = MultiByteToWideChar(0, 0, nameNode, -1, NULL, 0);
			wchar_t *nameNodeStr = new wchar_t[num1];
			//TODO---乱码问题--树形结构名称    指定CP_UTF8----UTF-8
			MultiByteToWideChar(CP_UTF8, 0, nameNode, -1, nameNodeStr, num1);
			LPCTSTR   Lstr = (LPCTSTR)nameNodeStr;

			//开始生成CTreeNodeUI
			CTreeNodeUI* nodeChild = new CTreeNodeUI;
			nodeChild->SetItemTextColor(0xFFFFFFFF);
			nodeChild->SetItemHotTextColor(0xFFC8C6CB);
			nodeChild->SetSelItemTextColor(0xFFC8C6CB);
			nodeChild->SetFixedHeight(22);
			nodeChild->SetAttribute(_T("folderattr"), _T("width=\"0\" float=\"true\" "));
			nodeChild->SetAttribute(_T("itemattr"), _T("padding=\"16,0,0,0\" align=\"left\" font=\"5\" "));
			//rtsp://admin:111111ab@192.168.100.252:554
			nodeChild->SetAttribute(_T("userdata"), _T(linkStr));
			string nums = to_string(id);
			string nodes = "node";
			nodes += nums;
			const char* data1 = nodes.c_str();
			int dataLen = MultiByteToWideChar(0, 0, data1, -1, NULL, 0);
			wchar_t *dataStr = new wchar_t[dataLen];
			MultiByteToWideChar(0, 0, data1, -1, dataStr, dataLen);
			LPCTSTR   LnodesStr = (LPCTSTR)dataStr;
			nodeChild->SetAttribute(_T("name"), _T(nodesStr));
			nodeChild->SetItemText(_T(str));
			m_pPlayerMgr->Select(1);
			//pParentTree->AddAt(node,2);//只能插入0到倒数第二个位置
			//pParentTree->AddChildNode(nodeChild); //可以插入到最后一个位置
			Play(pParentTree->AddAt(nodeChild, 2));
			//printf("Msg:%s", port);----循环打印此处会报错
		//}
		
	}
}

CControlUI* CDuiFrameWnd::CreateControl( LPCTSTR pstrClassName )
{
    CDuiString     strXML;
    CDialogBuilder builder;

    if (_tcsicmp(pstrClassName, _T("Caption")) == 0)
    {
        strXML = _T("Caption.xml");
    }
    else if (_tcsicmp(pstrClassName, _T("PlayPanel")) == 0)
    {
        strXML = _T("PlayPanel.xml");
    }
	else if (_tcsicmp(pstrClassName, _T("PlayerLayout")) == 0)
	{
		return new CPlayerLayoutUI();
	}
    if (! strXML.IsEmpty())
    {
        CControlUI* pUI = builder.Create(strXML.GetData(), NULL, NULL, &m_PaintManager, NULL); // 这里必须传入m_PaintManager，不然子XML不能使用默认滚动条等信息。
		
        return pUI;
    }
	
    return NULL;
}

//CDuiString转string函数
std::string StringFromLPCTSTR(LPCTSTR str) {
#ifdef _UNICODE
	int size_str = WideCharToMultiByte(CP_UTF8, 0, str, -1, 0, 0, NULL, NULL);

	char* point_new_array = new char[size_str];

	WideCharToMultiByte(CP_UTF8, 0, str, -1, point_new_array, size_str, NULL, NULL);

	std::string return_string(point_new_array);
	delete[] point_new_array;
	point_new_array = NULL;
	return return_string;
#else
	return std::string(str);
#endif
}


void CDuiFrameWnd::OnClick( TNotifyUI& msg )
{
	
	CTreeNodeUI* pParentTree = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("parent")));

	long num = pParentTree->GetCountChild();
	if (num >0 ) {
		for (int k = 0; k < num; k++)
		{
			CTreeNodeUI* child = pParentTree->GetChildNode(k);
			CDuiString Lchildname = child->GetName();

			/*size_t len = childname.length();
			int nmlen = MultiByteToWideChar(CP_ACP, 0, childname.c_str(), len + 1, NULL, 0);
			wchar_t* buffer = new wchar_t[nmlen];
			MultiByteToWideChar(CP_ACP, 0, bdurl.c_str(), len + 1, buffer, nmlen);*/
			if (msg.pSender->GetName() == _T(childname))
			{
				CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T(childname)));
				std::string nodenum = StringFromLPCTSTR(msg.pSender->GetName().GetData());
				/*int nPos = nodenum.find("o");
				if (nPos != -1)
				{
					carmerID = nodenum.substr(1, nPos);

				}*/
				string num1 = nodenum.substr(4, nodenum.length()-3);
				carmerID = num1;
				/*const char* count1 = carmerID.c_str();
				int dataLen1 = MultiByteToWideChar(0, 0, count1, -1, NULL, 0);
				wchar_t *dataStr1 = new wchar_t[dataLen1];
				MultiByteToWideChar(0, 0, count1, -1, dataStr1, dataLen1);
				LPCTSTR Ls = (LPCTSTR)dataStr1;
				MessageBox(NULL, _T(s), _T(s), 0);*/

				//停掉所有定时任务
				KillTimer(*this, 1);
				//清空所有节点数据
				CLabelUI* xx = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w0")));
				xx->SetBkImage(_T(""));
				xx->SetText(_T("xxx"));

				CLabelUI* xx1 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w1")));
				xx1->SetBkImage(_T(""));
				xx1->SetText(_T("xxx"));

				CLabelUI* xx2 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w2")));
				xx2->SetBkImage(_T(""));
				xx2->SetText(_T("xxx"));

				CLabelUI* xx3 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w3")));
				xx3->SetBkImage(_T(""));
				xx3->SetText(_T("xxx"));

				CLabelUI* xx4 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w4")));
				xx4->SetBkImage(_T(""));
				xx4->SetText(_T("xxx"));

				CLabelUI* xx5 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w5")));
				xx5->SetBkImage(_T(""));
				xx5->SetText(_T("xxx"));
				//=====================================
				CLabelUI* xxbl0 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl0")));
				xxbl0->SetBkImage(_T(""));
				xxbl0->SetText(_T("xxx"));

				CLabelUI* bl1 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl1")));
				bl1->SetBkImage(_T(""));
				bl1->SetText(_T("xxx"));

				CLabelUI* bl2 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl2")));
				bl2->SetBkImage(_T(""));
				bl2->SetText(_T("xxx"));

				CLabelUI* bl3 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl3")));
				bl3->SetBkImage(_T(""));
				bl3->SetText(_T("xxx"));

				CLabelUI* bl4 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl4")));
				bl4->SetBkImage(_T(""));
				bl4->SetText(_T("xxx"));

				CLabelUI* bl5 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("bl5")));
				bl5->SetBkImage(_T(""));
				bl5->SetText(_T("xxx"));
				//=====================================
				CLabelUI* b0 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b0")));
				b0->SetBkImage(_T(""));
				b0->SetText(_T("xxx"));

				CLabelUI* b1 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b1")));
				b1->SetBkImage(_T(""));
				b1->SetText(_T("xxx"));

				CLabelUI* b2 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b2")));
				b2->SetBkImage(_T(""));
				b2->SetText(_T("xxx"));

				CLabelUI* b3 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b3")));
				b3->SetBkImage(_T(""));
				b3->SetText(_T("xxx"));

				CLabelUI* b4 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b4")));
				b4->SetBkImage(_T(""));
				b4->SetText(_T("xxx"));

				CLabelUI* b5 = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("b5")));
				b5->SetBkImage(_T(""));
				b5->SetText(_T("xxx"));

				SetTimer(*this, 1, 500, NULL);
				m_pPlayerMgr->Select(1);
				Play(node->GetUserData());
			}
			else {
			
				/*KillTimer(*this,1);
				CLabelUI* xx = static_cast<CLabelUI*>(m_PaintManager.FindControl(_T("w0")));
				xx->SetBkImage(_T(""));
				xx->SetText(_T("xxx"));*/
			
			}
		}

	}
	
	////MessageBox(NULL, msg.pSender->GetName(), NULL, NULL);
	//if (msg.sType == DUI_MSGTYPE_ITEMCLICK)
	//{

	//	//TODO 动态获取node标签的name属性
	//	if (msg.pSender->GetName() == _T("node0"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node0")));
	//		/*wchar_t str[10];
	//		_itow_s(m_pPlayerMgr->GetCurSel(), str, 10);
	//		MessageBox(NULL, str, NULL, NULL);;*/
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		m_pPlayerMgr->Select(0);
	//		Play(node->GetUserData());
	//	}
	//	else if (msg.pSender->GetName() == _T("node1"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node1")));
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	else if (msg.pSender->GetName() == _T("node2"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node2")));
	//		
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	else if (msg.pSender->GetName() == _T("node3"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node3")));
	//		carmerID = "4";
	//		SetTimer(*this, 1, 500, NULL);
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	else if (msg.pSender->GetName() == _T("node4"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node4")));
	//		carmerID = "7";
	//		SetTimer(*this, 1, 500, NULL);
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	else if (msg.pSender->GetName() == _T("node5"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node5")));
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	//调试摄像头
	//	else if (msg.pSender->GetName() == _T("node100"))
	//	{
	//		CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node100")));
	//		m_pPlayerMgr->Select(1);
	//		/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//			MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//		Play(node->GetUserData());
	//	}
	//	
	//}
 //   else if( msg.pSender->GetName() == _T("btnFastBackward") ) 
 //   {
 //       m_pPlayerMgr->SeekBackward(0);
 //       ::PostMessage(*this, WM_USER_POS_CHANGED, 0, m_pPlayerMgr->GetPos(0));
 //   }
 //   else if( msg.pSender->GetName() == _T("btnFastForward") ) 
 //   {
	//	m_pPlayerMgr->SeekForward(0);
 //       ::PostMessage(*this, WM_USER_POS_CHANGED, 0, m_pPlayerMgr->GetPos(0));
 //   }
 //   else if( msg.pSender->GetName() == _T("btnPrevious") ) 
 //   {
 //       Play("");
 //   }
 //   else if( msg.pSender->GetName() == _T("btnNext") ) 
 //   {
 //       Play("");
 //   }
	//else if (msg.pSender->GetName() == _T("btnSelectedHF"))
	//{
	//	CTreeNodeUI* node = static_cast<CTreeNodeUI*>(m_PaintManager.FindControl(_T("node1")));

	//	/*if (node)MessageBox(NULL, node->GetUserData(), NULL, NULL);
	//		MessageBox(NULL, node->GetUserData(), NULL, NULL);*/
	//	

	//	Play(node->GetUserData());
	//}
 //   else if( msg.pSender->GetName() == _T("btnPlay") ) 
 //   {
 //       Play(true);
 //   }
 //   else if( msg.pSender->GetName() == _T("btnPause") ) 
 //   {
 //       Play(false);
 //   }
 //   else if( msg.pSender->GetName() == _T("btnStop") ) 
 //   {
 //       Stop();
 //   }
 //   else if( msg.pSender->GetName() == _T("btnOpen") || msg.pSender->GetName() == _T("btnOpenMini") ) 
 //   {
 //       OpenFileDialog(); 
 //   }
 //   else if( msg.pSender->GetName() == _T("btnRefresh") ) 
 //   {
 //       CEditUI* pUI = static_cast<CEditUI*>(m_PaintManager.FindControl(_T("editURL")));
 //       Play(pUI->GetText());
 //   }
 //   else if( msg.pSender->GetName() == _T("btnScreenFull") ) 
 //   {
 //       FullScreen(true);
 //   }
 //   else if( msg.pSender->GetName() == _T("btnScreenNormal") ) 
 //   {
 //       FullScreen(false);
 //   }
	//
	//else if( msg.pSender->GetName() == _T("btnPL") ) 
 //   {
	//	CDuiString sUserData = msg.pSender->GetUserData();
	//	int nPL = _ttoi(sUserData);
	//	if (nPL > 0) {
	//		m_pPlayerMgr->SetPL(nPL);
	//	}
 //   }
 //   else if( msg.pSender->GetName() == _T("btnVolume") ) 
 //   {
 //       m_pPlayerMgr->Volume(0);
 //       m_PaintManager.FindControl(_T("btnVolumeZero"))->SetVisible(true);
 //       msg.pSender->SetVisible(false);
 //   }
 //   else if( msg.pSender->GetName() == _T("btnVolumeZero") ) 
 //   {
 //       CSliderUI* pUI = static_cast<CSliderUI*>(m_PaintManager.FindControl(_T("sliderVol")));
 //       m_pPlayerMgr->Volume(pUI->GetValue());
 //       m_PaintManager.FindControl(_T("btnVolume"))->SetVisible(true);
 //       msg.pSender->SetVisible(false);
 //   }
 //   else if( (msg.pSender->GetName() == _T("btnPlayMode")))
 //   {
 //       CMenuWnd *pMenu = new CMenuWnd(_T("menu.xml"));
 //       POINT    pt = {msg.ptMouse.x, msg.ptMouse.y};
 //       CDuiRect rc = msg.pSender->GetPos();

 //       pt.x = rc.left;
 //       pt.y = rc.bottom;
 //       pMenu->Init(&m_PaintManager, pt);
 //       pMenu->ShowWindow(TRUE);
 //   }

    __super::OnClick(msg);
}

void CDuiFrameWnd::Notify( TNotifyUI& msg )
{
    if( msg.sType == DUI_MSGTYPE_DBCLICK )   
    {
        if (IsInStaticControl(msg.pSender))
        {
            // 这里会传进来很多次双击消息，所以只获取祖先控件的消息
            if (! msg.pSender->GetParent())
            {
                FullScreen(!m_bFullScreenMode);
            }
        }
    }
	else if(msg.sType == DUI_MSGTYPE_SELECTCHANGED) {
		CDuiString sName = msg.pSender->GetName();

		if(sName == _T("tabReal")) {
			CControlUI* pRecordBar = static_cast<CControlUI*>(m_PaintManager.FindControl(_T("recordBar")));
			if(pRecordBar) pRecordBar->SetVisible(false);
		}
		else if(sName == _T("tabRecord")) {
			/*CControlUI* pRecordBar = static_cast<CControlUI*>(m_PaintManager.FindControl(_T("recordBar")));
			if(pRecordBar) pRecordBar->SetVisible(true);*/
		}
	}

    __super::Notify(msg);
}

#define HANDLE_WM_DROPFILES(hwnd, wParam, lParam, fn) \
    ((fn)((hwnd), (HDROP)(wParam)), 0L)

LRESULT CDuiFrameWnd::HandleMessage( UINT uMsg, WPARAM wParam, LPARAM lParam )
{
    LRESULT lRes = __super::HandleMessage(uMsg, wParam, lParam);

    switch (uMsg)
    {
        HANDLE_MSG (*this, WM_DROPFILES, OnDropFiles);
        HANDLE_MSG (*this, WM_DISPLAYCHANGE, OnDisplayChange);
        HANDLE_MSG (*this, WM_GETMINMAXINFO, OnGetMinMaxInfo);
	case WM_TIMER:
	{
		break;
	}
    case WM_USER_PLAYING:
        return OnPlaying(*this, wParam, lParam);
    case WM_USER_POS_CHANGED:
        return OnPosChanged(*this, wParam, lParam);
    case WM_USER_END_REACHED:
        return OnEndReached(*this, wParam, lParam);       
    }

    return lRes;
}

LRESULT CDuiFrameWnd::OnNcHitTest( UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled )
{
    if (m_bFullScreenMode)
    {
        return HTCLIENT;
    }

    return __super::OnNcHitTest(uMsg, wParam, lParam, bHandled);
}

LRESULT CDuiFrameWnd::ResponseDefaultKeyEvent(WPARAM wParam)
{
    if (wParam == VK_ESCAPE)
    {
        if (m_bFullScreenMode)
        {
            FullScreen(false);
        }
    }

    return __super::ResponseDefaultKeyEvent(wParam);
}

LRESULT CDuiFrameWnd::MessageHandler(UINT uMsg, WPARAM wParam, LPARAM lParam, bool& bHandled)
{
	LRESULT lRes = __super::MessageHandler(uMsg, wParam, lParam, bHandled);
	if (uMsg == WM_LBUTTONDBLCLK || uMsg == WM_LBUTTONDOWN || uMsg == WM_RBUTTONDOWN) {
		POINT ptCursor;
		::GetCursorPos(&ptCursor);
		HWND hWnd = WindowFromPoint(ptCursor);
		if (hWnd != NULL && IsWindow(hWnd)) {
			CPlayerUI* pPlayer = m_pPlayerMgr->PlayerFromHWND(hWnd);
			if (pPlayer != NULL) {
				m_pPlayerMgr->Select(hWnd);
			}
		}
	}
	return lRes;
}

void CDuiFrameWnd::AdaptWindowSize( UINT cxScreen )
{
    int iX = 968, iY = 600;
    int iWidthList = 225, iWidthSearchEdit = 193;
    SIZE szFixSearchBtn = {201, 0};

    if(cxScreen <= 1024)      // 800*600  1024*768  
    {
        iX = 775;
        iY = 470;
    } 
    else if(cxScreen <= 1280) // 1152*864  1280*800  1280*960  1280*1024
    {
        iX = 968;
        iY = 600;
    }
    else if(cxScreen <= 1366) // 1360*768 1366*768
    {
        iX = 1058;
        iY = 656;
        iWidthList        += 21;
        iWidthSearchEdit  += 21;
        szFixSearchBtn.cx += 21;
    }
    else                      // 1440*900
    {
        iX = 1224;
        iY = 760;
        iWidthList        += 66;
        iWidthSearchEdit  += 66;
        szFixSearchBtn.cx += 66;
    }

    CControlUI *pctnPlaylist = m_PaintManager.FindControl(_T("ctnPlaylist"));
    CControlUI *peditSearch  = m_PaintManager.FindControl(_T("editSearch"));
    CControlUI *pbtnSearch   = m_PaintManager.FindControl(_T("btnSearch"));
    if (pctnPlaylist && peditSearch && pbtnSearch)
    {
        pctnPlaylist->SetFixedWidth(iWidthList);
        peditSearch->SetFixedWidth(iWidthSearchEdit);
        pbtnSearch->SetFixedXY(szFixSearchBtn);
    }

    ::SetWindowPos(m_PaintManager.GetPaintWindow(), NULL, 0, 0, iX, iY, SWP_FRAMECHANGED|SWP_NOZORDER|SWP_NOACTIVATE);
    CenterWindow();
}

void CDuiFrameWnd::OnDisplayChange( HWND hwnd, UINT bitsPerPixel, UINT cxScreen, UINT cyScreen )
{
    AdaptWindowSize(cxScreen);
}

void CDuiFrameWnd::OnGetMinMaxInfo( HWND hwnd, LPMINMAXINFO lpMinMaxInfo )
{     
    if (m_bFullScreenMode)
    {
        lpMinMaxInfo->ptMaxTrackSize.x = GetSystemMetrics(SM_CXSCREEN) + 2 * (GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXBORDER));
        lpMinMaxInfo->ptMaxTrackSize.y = GetSystemMetrics(SM_CYSCREEN) + 2 * (GetSystemMetrics(SM_CYFIXEDFRAME) + GetSystemMetrics(SM_CYBORDER));
    }
}

void CDuiFrameWnd::OnDropFiles( HWND hwnd, HDROP hDropInfo )
{
    UINT  nFileCount = ::DragQueryFile(hDropInfo, (UINT)-1, NULL, 0);
    TCHAR szFileName[_MAX_PATH] = _T("");
    DWORD dwAttribute;
    std::vector<duilib::string_t> vctString;

    // 获取拖拽进来文件和文件夹
    for (UINT i = 0; i < nFileCount; i++)
    {
        ::DragQueryFile(hDropInfo, i, szFileName, sizeof(szFileName));
        dwAttribute = ::GetFileAttributes(szFileName);

        // 是否为文件夹
        if ( dwAttribute & FILE_ATTRIBUTE_DIRECTORY )
        {          
            ::SetCurrentDirectory(szFileName);       
            EnumerateFiles(vctString);	      
        }
        else
        {
            vctString.push_back(szFileName);
        }
    }

	if (vctString.size() > 0) {
		Play(vctString[0].c_str());
	}
    ::DragFinish(hDropInfo);
}

void CDuiFrameWnd::ShowPlayButton( bool bShow )
{
    CControlUI *pbtnPlay  = m_PaintManager.FindControl(_T("btnPlay"));
    CControlUI *pbtnPause = m_PaintManager.FindControl(_T("btnPause"));

    if (pbtnPlay && pbtnPause)
    {
        pbtnPlay->SetVisible(bShow);
        pbtnPause->SetVisible(!bShow);
    }
}

void CDuiFrameWnd::ShowPlayWnd( bool bShow )
{
    CControlUI *pbtnWnd     = m_PaintManager.FindControl(_T("wndMedia"));
    CControlUI *pbtnStop    = m_PaintManager.FindControl(_T("btnStop"));
    CControlUI *pbtnScreen  = m_PaintManager.FindControl(_T("btnScreenFull"));
    CControlUI *pctnURL     = m_PaintManager.FindControl(_T("ctnURL"));
    CControlUI *pctnSlider  = m_PaintManager.FindControl(_T("ctnSlider"));

    if (pbtnWnd && pbtnStop && pbtnScreen && pctnURL && pctnSlider)
    {
        pbtnStop->SetEnabled(bShow);
        pbtnScreen->SetEnabled(bShow);
        pctnURL->SetVisible(! bShow);
        pctnSlider->SetVisible(bShow);

        // 打开文件时
        if (bShow)  
        {
            if (IsMusicFile(m_strPath))
            {
                pbtnWnd->SetVisible(!bShow);
            } 
            else
            {
                pbtnWnd->SetVisible(bShow);
            }
        }
        // 关闭文件时
        else        
        {
            pbtnWnd->SetVisible(false);
        }
    }
}

void CDuiFrameWnd::ShowControlsForPlay( bool bShow )
{
    m_pLabelTime->SetText(_T(""));
    ShowPlayWnd(bShow);
    ShowPlayButton(!bShow);
}

void CDuiFrameWnd::Play(bool bPlay )
{
    if (m_pPlayerMgr->IsOpen(-1))
    {
        ShowPlayButton(! bPlay);
        if (bPlay)
        {
			m_pPlayerMgr->Play(-1);
        } 
        else
        {
			m_pPlayerMgr->Pause(-1);
        }
    }
}

void CDuiFrameWnd::Play(LPCTSTR pszPath )
{
    if (! pszPath)
    {
        return;
    }

    m_strPath = pszPath;
	//MessageBox(NULL, pszPath, NULL, NULL);
    if (m_pPlayerMgr->Play(UnicodeToUTF8(pszPath)), -1)
    {
        ShowControlsForPlay(true);
    }
}

void CDuiFrameWnd::Stop()
{
    m_pPlayerMgr->Stop(-1);
    ShowControlsForPlay(false);
}

void CDuiFrameWnd::OpenFileDialog()
{
    OPENFILENAME ofn;      
    TCHAR szFile[MAX_PATH] = _T("");

    ZeroMemory(&ofn, sizeof(ofn));  
    ofn.lStructSize = sizeof(ofn);
    ofn.hwndOwner   = *this;
    ofn.lpstrFile   = szFile;   
    ofn.nMaxFile    = sizeof(szFile);  
    ofn.lpstrFilter = STR_FILE_FILTER;
    ofn.nFilterIndex    = 1;  
    ofn.lpstrFileTitle  = NULL;  
    ofn.nMaxFileTitle   = 0;  
    ofn.lpstrInitialDir = NULL;  
    ofn.Flags = OFN_EXPLORER | OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;  
    if (GetOpenFileName(&ofn))  
    {
        std::vector<duilib::string_t> vctString(1, szFile);
		if(vctString.size() > 0) {
			Play(vctString[0].c_str());
		}
    } 
}

void CDuiFrameWnd::FullScreen( bool bFull )
{
    CControlUI* pbtnFull   = m_PaintManager.FindControl(_T("btnScreenFull"));
    CControlUI* pbtnNormal = m_PaintManager.FindControl(_T("btnScreenNormal"));
    CControlUI* pUICaption = m_PaintManager.FindControl(_T("ctnCaption"));
    int iBorderX = GetSystemMetrics(SM_CXFIXEDFRAME) + GetSystemMetrics(SM_CXBORDER);
    int iBorderY = GetSystemMetrics(SM_CYFIXEDFRAME) + GetSystemMetrics(SM_CYBORDER);

    if (pbtnFull && pbtnNormal && pUICaption)
    {
        m_bFullScreenMode = bFull;

        if (bFull)
        {
            ::GetWindowPlacement(*this, &m_OldWndPlacement);

            if (::IsZoomed(*this))
            {
                ::ShowWindow(*this, SW_SHOWDEFAULT);
            }

            ::SetWindowPos(*this, HWND_TOPMOST, -iBorderX, -iBorderY, GetSystemMetrics(SM_CXSCREEN) + 2 * iBorderX, GetSystemMetrics(SM_CYSCREEN) + 2 * iBorderY, 0);
        } 
        else
        {
            ::SetWindowPlacement(*this, &m_OldWndPlacement);
            ::SetWindowPos(*this, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOMOVE);
        }

        pbtnNormal->SetVisible(bFull);
        pUICaption->SetVisible(! bFull);
        pbtnFull->SetVisible(! bFull);
    }
}

LRESULT CDuiFrameWnd::OnPlaying(HWND hwnd, WPARAM wParam, LPARAM lParam )
{
    return TRUE;
}

LRESULT CDuiFrameWnd::OnPosChanged(HWND hwnd, WPARAM wParam, LPARAM lParam )
{
    CDuiString  strTime;
    struct tm   tmTotal, tmCurrent;
    time_t      timeTotal   = m_pPlayerMgr->GetTotalTime(0) / 1000;
    time_t      timeCurrent = m_pPlayerMgr->GetTime(0) / 1000;
    TCHAR       szTotal[MAX_PATH], szCurrent[MAX_PATH];

    gmtime_s(&tmTotal, &timeTotal);
    gmtime_s(&tmCurrent, &timeCurrent);
    _tcsftime(szTotal,   MAX_PATH, _T("%X"), &tmTotal);
    _tcsftime(szCurrent, MAX_PATH, _T("%X"), &tmCurrent);
    strTime.Format(_T("%s / %s"), szCurrent, szTotal);
    m_pLabelTime->SetText(strTime);
    m_pSliderPlay->SetValue(m_pPlayerMgr->GetPos(0));
    return TRUE;
}

LRESULT CDuiFrameWnd::OnEndReached(HWND hwnd, WPARAM wParam, LPARAM lParam )
{
    Play("");
    return TRUE;
}

bool CDuiFrameWnd::OnPosChanged( void* param )
{
    TNotifyUI* pMsg = (TNotifyUI*)param;

    if( pMsg->sType == _T("valuechanged") )
    {
        m_pPlayerMgr->SeekTo((static_cast<CSliderUI*>(pMsg->pSender))->GetValue() + 1); // 获取的值少了1，导致设置的值也少了1，所以这里+1
    }

    return true;
}

bool CDuiFrameWnd::OnVolumeChanged(void* param)
{
	TNotifyUI* pMsg = (TNotifyUI*)param;

	if (pMsg->sType == _T("valuechanged"))
	{
		m_pPlayerMgr->Volume((static_cast<CSliderUI*>(pMsg->pSender))->GetValue());
	}

	return true;
}

void CDuiFrameWnd::ReadConfig(LPCTSTR pszPath)
{
    if (! pszPath)
    {
        return; 
    }

    DWORD  dwSize;
    HANDLE hFile = (HANDLE)CreateFile(pszPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL); 
    if (hFile == INVALID_HANDLE_VALUE) 
    { 
        return; 
    } 

    CloseHandle(hFile);
}

void CDuiFrameWnd::WriteConfig(LPCTSTR pszPath)
{
    if (! pszPath)
    {
        return; 
    }

    DWORD  dwSize;
    HANDLE hFile = (HANDLE)CreateFile(pszPath, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL); 
    if (hFile == INVALID_HANDLE_VALUE) 
    { 
        return; 
    } 

    CloseHandle(hFile);
}

